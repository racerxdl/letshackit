<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://lucasteske.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lucasteske.dev/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-12-19T04:13:26+00:00</updated><id>https://lucasteske.dev/feed.xml</id><title type="html">Lets Hack It</title><subtitle>Sou Lucas Teske, gosto de Eletrônica, Computação, Física.  Todos os hacks que eu fizer, serão colocados aqui. Aceito sugestões :D</subtitle><author><name>Lucas Teske</name><email>letshackit@nvx.li</email></author><entry><title type="html">Antenna Rotor - Part 2</title><link href="https://lucasteske.dev/2021/04/rotor-antenna-parte-2" rel="alternate" type="text/html" title="Antenna Rotor - Part 2" /><published>2021-04-01T05:23:00+00:00</published><updated>2021-04-01T05:23:00+00:00</updated><id>https://lucasteske.dev/2021/04/rotor-antenna-parte-2</id><content type="html" xml:base="https://lucasteske.dev/2021/04/rotor-antenna-parte-2"><![CDATA[<p>Continuing the tracker project, I managed to make some significant progress. As Demilson (PY2UEP) had cut the original motors, I did the same. The azimuth motor was too rusted and I eventually destroyed one of the coils (which I wanted to salvage the wire), but in the end the shaft went out.</p>

<hr />

<p>After removing the shaft, I broke the magnet with a hammer until there was any piece left. That way, the only thing that would be left there is the shaft and the hexagon magnet support.</p>

<p><img src="/assets/posts/tracker-mount-2/azimuth-motor-shaft.jpg" alt="Hexagon Magnet Support 1" />
<img src="/assets/posts/tracker-mount-2/azimuth-motor-shaft2.jpg" alt="Hexagon Magnet Support 2" />
<img src="/assets/posts/tracker-mount-2/azimuth-motor-shaft3.jpg" alt="Hexagon Magnet Support 3" /><em>Motor shaft showing the hexagon support</em></p>

<p>For the elevation motor, I made a cut in a circular mark around the exit of the shaft. That way I could use the same support for coupling with the reduction gears.</p>

<p><img src="/assets/posts/tracker-mount-2/elevation-shaft-support.jpg" alt="&quot;lid&quot; of the elevation motor after cut" /><em>“lid” of the elevation motor after cut</em>
<img src="/assets/posts/tracker-mount-2/elevation-shaft-support-with-reduction.jpg" alt="Lid + Reduction Gears" /><em>Lid + Reduction Gears</em>
<img src="/assets/posts/tracker-mount-2/elevation-motor-parts2.jpg" alt="Motor Pieces" /><em>Motor Pieces</em></p>

<p>For the shaft, it was nescessary to reduce its size and made a bevel so I could fit it better in a 3D Printed part. To do so, I use two plywood pieces to hold the shaft while me and my father cut it. For the bevel, we used a grinder.</p>

<p><img src="/assets/posts/tracker-mount-2/elevation-shaft-cut.jpg" alt="Plywood and cutted shaft" /><em>Plywood and cutted shaft</em>
<img src="/assets/posts/tracker-mount-2/elevation-shaft-support-with-shaft.jpg" alt="Cutted Shaft on motor head" /><em>Cutted Shaft on motor head</em></p>

<p>With that, I could then start the 3D Drawings for the adapters.</p>

<h2 id="3d-prints">3D Prints</h2>

<p>After A LOT of trial and error, I managed to make good fittings between the shafts. But then I realized a problem: The space for the azimuth axis was <strong>extremelly</strong> limited, in the way that my 40 mm NEMA17 motors were too big for it.</p>

<p><img src="/assets/posts/tracker-mount-2/try-azimuth-44adapter.jpg" alt="Azimuth Adapter" />
<img src="/assets/posts/tracker-mount-2/try-azimuth-44adapter-place.jpg" alt="Azimuth Adapter" /><em>Azimuth Adapter</em></p>

<p>Then I had to buy some “slim” motors to use in that place. I got a bit concerned with the final torque, but my attempts to make gears and other stuff were all failed. The motors I bought in Aliexpress (see links in the end of this post)</p>

<p>While the motor wasn’t arriving, I started optimizing the adapters to be the shortest as possible, saving all space I could. I use <a href="https://www.freecadweb.org/">FreeCAD</a> for being free and where I can do faster / better drawings. But don’t assume I’m a 3D Designer, because I’m not. My parts are only “functional”.</p>

<p><img src="/assets/posts/tracker-mount-2/azimuth-shaft-adapter.jpg" alt="Azimuth Shaft Adapter" /><em>Azimuth Shaft Adapter</em>
<img src="/assets/posts/tracker-mount-2/azimuth-support.jpg" alt="Azimuth Support" /><em>Azimuth Support</em>
<img src="/assets/posts/tracker-mount-2/elevation-shaft-adapter.jpg" alt="Elevation Shaft Adapter" /><em>Elevation Shaft Adapter</em>
<img src="/assets/posts/tracker-mount-2/elevation-motor-adapter.jpg" alt="Elevation Adapter" /><em>Elevation Adapter</em>
<img src="/assets/posts/tracker-mount-2/exploded-elevation-shaft.jpg" alt="" /></p>

<p>And the first axis to work was the elevation. To do so I used 40 mm NEMA17 motors (link in end of this post), which came with a closed-loop magnetic encoder driver. But in the end I went to use a TMC2209 to control instead the board that came in because it was easier and quieter.</p>

<p><img src="https://www.youtube.com/watch?v=cfUtCqb3oxA" alt="" />
<img src="https://www.youtube.com/watch?v=ENTpTZaiXl4" alt="" /></p>

<p>After the new azimuth motors arrived, I just tried to fit everything. And it did! se ia caber. E coube!</p>

<p><img src="/assets/posts/tracker-mount-2/assembled-azimuth-support.jpg" alt="Azimuth" />
<img src="/assets/posts/tracker-mount-2/azimuth-motor-inplace.jpg" alt="Azimuth Motor in place" /></p>

<p>And also working!</p>

<p><img src="https://www.youtube.com/watch?v=-4U-ofHaF0E" alt="" /></p>

<p>After everything was working, I did some tests to check what was the final resolution and reduction for both axis. To do so, I used the following code with an ESP32 to control the TMC2209 drivers, and for angle measurement I used my phone attached to the elevation base.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;TMCStepper.h&gt;</span><span class="cp">
</span>
<span class="cp">#define STEP_PIN         12 // Step
#define EN_PIN           23 // Enable
</span>
<span class="cp">#define SERIAL_PORT Serial2 // TMC2208/TMC2224 HardwareSerial port
#define DRIVER_ADDRESS 0b00 // TMC2209 Driver address according to MS1 and MS2
</span>
<span class="cp">#define R_SENSE 0.11f 
</span>
<span class="n">TMC2209Stepper</span> <span class="nf">driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">SERIAL_PORT</span><span class="p">,</span> <span class="n">R_SENSE</span><span class="p">,</span> <span class="n">DRIVER_ADDRESS</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">STEP_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">EN_PIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">EN_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  
  <span class="n">SERIAL_PORT</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>      <span class="c1">// HW UART drivers</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>

  <span class="n">driver</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>                 <span class="c1">// UART: Init SW UART (if selected) with default 115200 baudrate</span>
  <span class="n">driver</span><span class="p">.</span><span class="n">toff</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>                <span class="c1">// Enables driver in software</span>
  <span class="n">driver</span><span class="p">.</span><span class="n">rms_current</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>       <span class="c1">// Set motor RMS current</span>
  <span class="n">driver</span><span class="p">.</span><span class="n">microsteps</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>           <span class="c1">// Set microsteps to 1/16th</span>

  <span class="n">driver</span><span class="p">.</span><span class="n">en_spreadCycle</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>    <span class="c1">// Toggle spreadCycle on TMC2208/2209/2224</span>
  <span class="n">driver</span><span class="p">.</span><span class="n">pwm_autoscale</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>      <span class="c1">// Needed for stealthChop</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"OK"</span><span class="p">);</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">EN_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">shaft</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">//  Serial.println("TURN");</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">z</span> <span class="o">==</span> <span class="sc">'a'</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Stepping 10000"</span><span class="p">);</span>
      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">EN_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">STEP_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
        <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">350</span><span class="p">);</span>
        <span class="n">digitalWrite</span><span class="p">(</span><span class="n">STEP_PIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
        <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">350</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">EN_PIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">z</span> <span class="o">==</span> <span class="sc">'b'</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">shaft</span> <span class="o">=</span> <span class="o">!</span><span class="n">shaft</span><span class="p">;</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Shaft direction: "</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">shaft</span><span class="p">);</span>
      <span class="n">driver</span><span class="p">.</span><span class="n">shaft</span><span class="p">(</span><span class="n">shaft</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The results were:</p>

<ul>
  <li>Elevation Axis
    <ul>
      <li>Aproximated Reduction: 1:3500</li>
      <li>Angular Resolution: 0,000117 deg / step</li>
      <li>Maximum Speed: 0,62 deg / s</li>
    </ul>
  </li>
  <li>Azimuth Axis
    <ul>
      <li>Aproximated Reduction: 1:392</li>
      <li>Angular Resolution: 0,0046 deg / step</li>
      <li>Maximum speed: 6,3 deg / s</li>
    </ul>
  </li>
</ul>

<p>The results looks promissing and, if everything goes right, will be enough for tracking satellites!</p>

<p>The next step is to code / assemble the required software/hardware to control it through network!</p>

<p>The 3D Models (Both freecad and STL) are available in Thingverse (see links section)</p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://s.click.aliexpress.com/e/_AOhCSe">Azimuth Motor</a></li>
  <li><a href="https://s.click.aliexpress.com/e/_ADtVZs">Elevation Motor (Closed-Loop)</a></li>
  <li><a href="https://s.click.aliexpress.com/e/_9zgziK">Elevation Motor (Normal)</a></li>
  <li><a href="https://s.click.aliexpress.com/e/_AoG3ZC">TMC2209 Drivers</a></li>
  <li><a href="https://www.thingiverse.com/thing:4813288">STL / Freecad Files</a></li>
</ul>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Reverse Engineering" /><category term="Satellite" /><category term="SDR" /><category term="Airspy" /><category term="EMWIN" /><category term="English" /><category term="GOES" /><category term="Hearsat" /><category term="LRIT" /><category term="RE" /><category term="Reverse Engineering" /><category term="Sat" /><category term="Satellite" /><category term="SDR" /><summary type="html"><![CDATA[Continuing the tracker project, I managed to make some significant progress. As Demilson (PY2UEP) had cut the original motors, I did the same. The azimuth motor was too rusted and I eventually destroyed one of the coils (which I wanted to salvage the wire), but in the end the shaft went out.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/tracker-mount-2/assembled-elevation-shaft.jpg" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/tracker-mount-2/assembled-elevation-shaft.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Antenna Rotor - Part 1</title><link href="https://lucasteske.dev/2021/03/rotor-antenna-parte-1" rel="alternate" type="text/html" title="Antenna Rotor - Part 1" /><published>2021-03-03T23:57:00+00:00</published><updated>2021-03-03T23:57:00+00:00</updated><id>https://lucasteske.dev/2021/03/rotor-antenna-parte-1</id><content type="html" xml:base="https://lucasteske.dev/2021/03/rotor-antenna-parte-1"><![CDATA[<p>A few years ago I bought a Pelco Câmera Rotor, model PT175-24P. This rotor is made for carrying a camera with up to 8kg, and contains two biphase reversable motors internally. My idea was (and is) to put a satellite dish coupled, and control its movement to track satellites. Then I could use it to receive Low Orbit Satellites.</p>

<p><img src="/assets/posts/tracker-mount/motor-schematic.jpg" alt="Internal Schematics" /><em>Internal Schematics</em></p>

<hr />

<p>The problem of the original system from pelco, is that they’re two 24V AC Motors, which would require a VFD (Variable Frequency Driver) to control the speed and a closed-loop system with a angle sensor. That would make it a bit complex to control the antenna, so a friend of my (PY2UEP) suggested to modify it to use stepper motors instead. The big advantage of stepper motors is that their steps always has the same length. So if the motor goes N steps in one direction and then N steps in the oposite direction, it will return <strong>exactly</strong> where it started. That allows for open-loop circuits (where you just calibrate the start and then you dont need a feedback to fix everything).</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_20-56-30.jpg" alt="Stepper Motor" /><em>Stepper Motor</em></p>

<h1 id="make-the-cleaning">Make the cleaning</h1>

<p>Then I started opening the rotor and make a super-clean. Remove all old grease and dust.</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-02_20-19-46.jpg" alt="Pelco Interior" /><em>Pelco Interior</em>
<img src="/assets/posts/tracker-mount/photo_2021-03-02_20-19-46-2.jpg" alt="Pelco Interior" /><em>Pelco Interior</em></p>

<p>I disassembled everything and then made a querosene bath to remove grease from everywhere. Two of the azimuth rollers were well stuck (the grease was so dry that it looked like a glue), so I left in the querosene until the next day and then cleaned up with a paint brush. After all the cleaning, the rollers looks new!</p>

<p><img src="https://www.youtube.com/watch?v=9Y2FpSlNss8" alt="" /></p>

<p>The rest of the parts I basically tossed inside a bucket and filled with querosene with a bit of water. Then I started stiring the parts inside. After a while, I let it sit and made several washes with water and soap to remove all querosene.</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_19-23-52.jpg" alt="Bucket with parts" /><em>Bucket with washed parts</em></p>

<p>The belts I left on the querosene for a few minutes and then used a paint brush to remove all stuck pieces of grease.</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_19-23-53.jpg" alt="Belts" /><em>Belts in querosene</em></p>

<p>After all clean-up, I started the re-assembly by putting the two azimuth rollers in place. The one from below is stuck inside the piece under pressure, so I needed to use a hammer. With a lot of care, I managed to push the piece until it fit perfectly with the surface of the base. After that I pushed the azimuth axis through the roller.</p>

<p><img src="https://www.youtube.com/watch?v=5wpSKRn5RnM" alt="" /></p>

<p>Just after that, I put the reduction gears and the azimuth belt in place.</p>

<p><img src="https://www.youtube.com/watch?v=bE6B3GejGmA" alt="" /></p>

<p>After that, everything was easy: just screw everything together. In the end I left it open so I could plan the position of the stepper motors:</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_22-51-36.jpg" alt="Open Pelco Mount" /><em>Open Pelco Mount</em></p>

<p>The next step is to disassemble the original motors and adapt the axis for the stepper motors!</p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_22-56-26-2.jpg" alt="Azimuth Motor" /><em>Azimuth Motor</em></p>

<p><img src="/assets/posts/tracker-mount/photo_2021-03-03_22-56-26.jpg" alt="Elevation Motor" /><em>Elevation Motor</em></p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Reverse Engineering" /><category term="Satellite" /><category term="SDR" /><category term="Airspy" /><category term="EMWIN" /><category term="English" /><category term="GOES" /><category term="Hearsat" /><category term="LRIT" /><category term="RE" /><category term="Reverse Engineering" /><category term="Sat" /><category term="Satellite" /><category term="SDR" /><summary type="html"><![CDATA[A few years ago I bought a Pelco Câmera Rotor, model PT175-24P. This rotor is made for carrying a camera with up to 8kg, and contains two biphase reversable motors internally. My idea was (and is) to put a satellite dish coupled, and control its movement to track satellites. Then I could use it to receive Low Orbit Satellites.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/tracker-mount/head.jpg" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/tracker-mount/head.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to FPGA</title><link href="https://lucasteske.dev/2020/10/introducao-a-fpga" rel="alternate" type="text/html" title="Introduction to FPGA" /><published>2020-10-12T02:59:00+00:00</published><updated>2020-10-12T02:59:00+00:00</updated><id>https://lucasteske.dev/2020/10/introducao-a-fpga</id><content type="html" xml:base="https://lucasteske.dev/2020/10/introducao-a-fpga"><![CDATA[<p>(So far) Only available in <a href="/pt/2020/10/introducao-a-fpga">Portuguese</a></p>]]></content><author><name>Lucas Teske</name></author><category term="Portugues" /><category term="Hacking" /><category term="FPGA" /><category term="Hardware" /><category term="Eletrônica" /><category term="Verilog" /><category term="Hacking" /><category term="FPGA" /><category term="ICEWolf" /><category term="IceStick" /><category term="ECP5" /><category term="Lattice" /><category term="Hardware" /><category term="Eletrônica" /><category term="Verilog" /><summary type="html"><![CDATA[(So far) Only available in Portuguese]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/FPGA.jpg" /><media:content medium="image" url="https://lucasteske.dev/assets/FPGA.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hacking a ESP32 into FPGA Board</title><link href="https://lucasteske.dev/2020/06/hacking-a-esp32-into-fpga-board" rel="alternate" type="text/html" title="Hacking a ESP32 into FPGA Board" /><published>2020-06-14T19:17:00+00:00</published><updated>2020-06-14T19:17:00+00:00</updated><id>https://lucasteske.dev/2020/06/hacking-a-esp32-into-fpga-board</id><content type="html" xml:base="https://lucasteske.dev/2020/06/hacking-a-esp32-into-fpga-board"><![CDATA[<h1 id="hacking-a-esp32-into-fpga-board">Hacking a ESP32 into FPGA Board</h1>

<p>Colorlight Hub 5A-75B V6.1 Board</p>

<p>Last year I saw a russian guy that found out that this cheap board (US$15~) had an Lattice ECP5 FPGA, which is compatible with Open Source Tool-chains for synthesis. He was running a RISC-V Core inside that and piping the serial through the ethernet ports. I wanted to get one and start playing by myself.
These boards are relatively cheap, about US$15 and contains a Lattice ECP5 FPGA ( LFE5U-25F-6BG381C ), 4MB DRAM, Two Gigabit Ethernet and several level shifters for I/O. This is good because:</p>

<ol>
  <li>That’s a very cheap board by the specs</li>
  <li>You can use open-source synth toolchain</li>
  <li>There is lots of 5V bi-directional level shifters</li>
</ol>

<p>I decided to give a shot and buy one from Aliexpress. Sadly because of the pandemic COVID-19, the package is long time delayed (still haven’t arrived yet, 3 months after I bought). Luckily I found it on Mercado Livre (the Brazilian eBay) to sell at a reasonable price.</p>

<p>When it arrived, I first tried to run the classic Hardware Hello World: The led blink. For that I got this project to test it: <a href="https://github.com/antonblanchard/ghdl-yosys-blink">https://github.com/antonblanchard/ghdl-yosys-blink</a></p>

<p>I did a fork to add the board constraints, and also a FT232R bitbang mode to OpenOCD (since it was the only JTAG adapter I had at the moment)[ see <a href="https://github.com/racerxdl/ghdl-yosys-blink">https://github.com/racerxdl/ghdl-yosys-blink</a> ]</p>

<p>I didn’t had to reverse engineer the board, since someone already did all the reverse engineer: <a href="https://github.com/q3k/chubby75/blob/master/5a-75b/hardware_V6.1.md">https://github.com/q3k/chubby75/blob/master/5a-75b/hardware_V6.1.md</a></p>

<p>The JTAG Headers are easy to access, and all pinouts are mapped. Great!</p>

<p>After few minutes tuning the ghdl-yosis-blink example I managed to make it work on my board. Still it was running on ram memory only and I wanted to write to SPI Flash. Lattice allows to write the SPI Flash using the jtag, so I started searching over the internet stuff that could convert the generated bitstream to program the flash. After testing lots of tools, I found out this simple tool did the job: <a href="https://github.com/f32c/tools/tree/master/ujprog">https://github.com/f32c/tools/tree/master/ujprog</a></p>

<p>I just had to run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ujprog <span class="nt">-d</span> <span class="nt">-j</span> flash <span class="nt">-s</span> vhdl_blink-flash.svf vhdl_blink.bit
</code></pre></div></div>

<p>And the generated vhdl_blink-flash.svf was persisting into the flash memory.</p>

<center>
  <blockquote class="twitter-tweet"><p lang="en" dir="ltr">After few days I managed to write thr SPI Flash using FT232H. Full <a href="https://twitter.com/hashtag/opensource?src=hash&amp;ref_src=twsrc%5Etfw">#opensource</a> stuff to program that board. Also only US$15. <a href="https://t.co/RujsOGwH1D">pic.twitter.com/RujsOGwH1D</a></p>&mdash; Cybernetic Lover (@lucasteske) <a href="https://twitter.com/lucasteske/status/1268616857583419393?ref_src=twsrc%5Etfw">June 4, 2020</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>

<p>Now that everything was working, I decided to make a bigger hack: I wanted an ESP32 to be attached in the board and program through network. It would also be nice if I could redirect a serial port to the network (useful for debug).</p>

<p>The first thing I did is chose a GPIO pair to be the TX/RX from the serial port. The ESP32 has three serial ports, but on my board only two of them were exposed (Serial 0 and 2). The Serial 0 port is attached to the USB-Serial converter onboard, so I decided to use the Serial 2 to communicate with the FPGA. After looking at the pinout, most of the Level Shifters pins are common (the address lines are half of the pins) and the ones close to the lower part of the board (which would be easier to solder) were the address lines. After poking around, I decided to remove the J4 connector and U23 level shifter (the ESP32 is 3.3V, remember that!)</p>

<p><img src="/assets/posts/medium/0_wK9QPXyVChE4n8py.jpeg" alt="U23 and J4 removed" /><em>U23 and J4 removed</em></p>

<p>I also decided to remove J3 to make easier to solder the bypass wires at that connector. Then I soldered all bypass wires to make it 3.3V instead 5V</p>

<p><img src="/assets/posts/medium/1_tT_gWmR6KPWXKKoewW-KDQ.png" alt="Bypass wires soldered in U23" /><em>Bypass wires soldered in U23</em></p>

<p>The 33 Ohm resistores are nice since it could avoid short circuits when wrong pins are associated to serial port. So I decided to keep then as is. After checking that all pins were OK and not shorted, I decided to use hot-glue to secure them:</p>

<p><img src="/assets/posts/medium/1_53DN-rC8MrNRfFdVmzN-Uw.png" alt="Hot-glue raw pieces" /><em>Hot-glue raw pieces</em></p>

<p>I always found out that using a heat-gun with 200ºC was better to hot-glue than the hot-glue gun. Also I would avoid heating the wires too much and letting them go.</p>

<p><img src="/assets/posts/medium/1_7O77I22KdFxtNz4-G2cSeA.png" alt="Heat gun with hot-glue" /><em>Heat gun with hot-glue</em></p>

<p>After cooling down, the results look really good:</p>

<p><img src="/assets/posts/medium/1_sCDf7DO_2mY2FoOTLN357Q.png" alt="Hot-glue on bypass wires" /><em>Hot-glue on bypass wires</em></p>

<p>Then I went to the back-side of the board to solder the VCC/GND pair and the TX/RX pair wires. Luckily the power input for this board is 3.6 to 6V and then I can use the VIN from ESP32 (which is attached to USB +5V) to power it. The power connector is also close to J4 we removed.</p>

<p><img src="/assets/posts/medium/1_sADN_JL_MLf9TP5r7FVymQ.png" alt="Power Connector and Serial Port" /><em>Power Connector and Serial Port</em></p>

<p>Then with some double-sided tape, I could attach the ESP32 to the side of the board and solder the wires to the right pins.</p>

<p><img src="/assets/posts/medium/1_86Ir5XIqvHCLbMsbWxs5MA.png" alt="ESP32 fixed with double-sided table and wires soldered" /><em>ESP32 fixed with double-sided table and wires soldered</em></p>

<p>Now I just had to choose some pins for the JTAG and we would be good to go! After searching for some safe pins on ESP32 I choose these:</p>

<ul>
  <li>TDI =&gt; D33</li>
  <li>TDO =&gt; D32</li>
  <li>TCK =&gt; D27</li>
  <li>TMS =&gt; D26</li>
</ul>

<p>And I soldered the wires as best looking as I could.</p>

<p><img src="https://cdn-images-1.medium.com/max/2544/0_ERp9fzhTj8EL0i1G" alt="" /></p>

<p>I also had to solder the GND of the ESP32 into the GND of the JTAG header (I had a problem the FT232R that was solved by attaching the GND to the header there)</p>

<p><img src="/assets/posts/medium/1_Ltxy34-3hHoAalgDOHqG7A.png" alt="JTAG Power Header" /><em>JTAG Power Header</em></p>

<p><img src="/assets/posts/medium/1_Sae7vuGGrvCUuYZdOiGPVA.png" alt="GND wire soldered" /><em>GND wire soldered</em></p>

<p>With all wires soldered, I could start playing with software!</p>

<p>At first I tried the OpenOCD Remote Bitbang which connects to TCP socket and start issuing bitbang commands by using a single ASCII character. For some reason I couldn’t make it work right. If you want to try by yourself:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;WiFi.h&gt;</span><span class="cp">
</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">ssid</span>     <span class="o">=</span> <span class="s">"XX"</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"XX"</span><span class="p">;</span>

<span class="n">WiFiServer</span> <span class="nf">server</span><span class="p">(</span><span class="mi">3335</span><span class="p">);</span>

<span class="cp">#define PIN_SRST 21
#define PIN_TDI 33
#define PIN_TDO 32
#define PIN_TCK 27
#define PIN_TMS 26
#define PIN_LED 2
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_SRST</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_TDO</span><span class="p">,</span> <span class="n">INPUT_PULLUP</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_SRST</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="c1">// We start by connecting to a WiFi network</span>

    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Connecting to "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">ssid</span><span class="p">);</span>

    <span class="n">WiFi</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">ssid</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">status</span><span class="p">()</span> <span class="o">!=</span> <span class="n">WL_CONNECTED</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"WiFi connected."</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"IP address: "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">WiFi</span><span class="p">.</span><span class="n">localIP</span><span class="p">());</span>
    <span class="n">server</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">WiFiClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">available</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">client</span><span class="p">)</span> <span class="p">{</span>                     <span class="c1">// if you get a client,</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"New Client."</span><span class="p">);</span>  <span class="c1">// print a message out the serial port</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>
                <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">case</span> <span class="sc">'B'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'b'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'R'</span><span class="p">:</span>
                      <span class="n">client</span><span class="p">.</span><span class="n">print</span><span class="p">((</span><span class="n">digitalRead</span><span class="p">(</span><span class="n">PIN_TDO</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="o">?</span> <span class="sc">'1'</span> <span class="o">:</span> <span class="sc">'0'</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'Q'</span><span class="p">:</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'0'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'1'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'2'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'3'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'4'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'5'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'6'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'7'</span><span class="p">:</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TMS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TDI</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_LED</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_TCK</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'r'</span><span class="p">:</span>
                    <span class="k">case</span> <span class="sc">'t'</span><span class="p">:</span>
                      <span class="c1">// SRST=0, which confusingly means to *exit* reset (as /RESET and /TRST are active-low)</span>
                      <span class="c1">// We don't have a TRST connection, so 'r' and 't' do the same thing.</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_SRST</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
                      <span class="c1">//digitalWrite(PIN_CHIP_EN, HIGH);</span>
                      <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">'s'</span><span class="p">:</span>
                    <span class="k">case</span> <span class="sc">'u'</span><span class="p">:</span>
                      <span class="c1">// SRST=1 -- enter RESET state</span>
                      <span class="c1">// Likewise for 's' and 'u'.</span>
                      <span class="n">digitalWrite</span><span class="p">(</span><span class="n">PIN_SRST</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
                      <span class="c1">//digitalWrite(PIN_CHIP_EN, LOW);</span>
                      <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Client disconnected"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So yesterday someone sent me a link that was not related to that, but I found this lib:
<a href="http://www.clifford.at/libxsvf/"><strong>Lib(X)SVF - A library for implementing SVF and XSVF JTAG players</strong>
<em>JTAG (IEEE 1149.1, aka “Boundary Scan”) is a standard IC testing, debugging and programming port. SVF (Serial Vector…</em>www.clifford.at</a></p>

<p>Basically it was written by the same person that did the reverse engineer for ICE40 FPGA Bitstream (and several others) and make a nice lib to “play” the SVF and XSVF files. It was pretty straightforward to implement a programmer using the ESP32. Basically you only had to implement a few functions and the player would work.</p>

<p>I went through a lot of work to make it nice to use, so I will not explain in details here. But the source code is available here: <a href="https://github.com/racerxdl/esp32-rjtag">https://github.com/racerxdl/esp32-rjtag</a></p>

<p>Basically you can run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upload.py /dev/ttyUSB0 file.svf
</code></pre></div></div>

<p>And it will write the FPGA for you. Here is a video of working:</p>

<center>
  <blockquote class="twitter-tweet"><p lang="en" dir="ltr">FINALLY. Now I can use the ESP32 as JTAG programmer for Lattice FPGA. Soon I will able to program through wifi and pipe a serial debug port as well. <a href="https://t.co/zs41v47BvU">pic.twitter.com/zs41v47BvU</a></p>&mdash; Cybernetic Lover (@lucasteske) <a href="https://twitter.com/lucasteske/status/1272019368617095173?ref_src=twsrc%5Etfw">June 14, 2020</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>

<p>I also added a simple command to switch the ESP32 from programming mode to Serial Passthrough. This way, after programming it can pipe all FPGA Serial Calls to the ESP32 serial. Then I did this small Serial Hello World for testing it:
<a href="https://github.com/racerxdl/fpga-serial-hello"><strong>racerxdl/fpga-serial-hello</strong></a></p>

<p>Which basically keeps sending Hello World through the serial port forever. And it does work!</p>

<p><img src="/assets/posts/medium/1_Z8RdW5i7NQh7KUEC5v5NFg.png" alt="Hello World output from FPGA" /><em>Hello World output from FPGA</em></p>

<p>My next steps is to make this work through network instead of serial port. Which would be really amazing!</p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Hacking" /><category term="Linux" /><category term="FPGA" /><category term="ESP32" /><category term="Hacking" /><category term="FPGA" /><category term="ICEWolf" /><category term="IceStick" /><category term="ECP5" /><category term="Lattice" /><category term="ESP32" /><category term="Colorlight" /><summary type="html"><![CDATA[Hacking a ESP32 into FPGA Board]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_ALnLx9L06FSciqeEV5OCuQ.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_ALnLx9L06FSciqeEV5OCuQ.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hack a Sat - Talk to me, Goose</title><link href="https://lucasteske.dev/2020/05/hack-a-sat-talk-to-me-goose/" rel="alternate" type="text/html" title="Hack a Sat - Talk to me, Goose" /><published>2020-05-31T22:02:00+00:00</published><updated>2020-05-31T22:02:00+00:00</updated><id>https://lucasteske.dev/2020/05/hack-a-sat-talk-to-me-goos</id><content type="html" xml:base="https://lucasteske.dev/2020/05/hack-a-sat-talk-to-me-goose/"><![CDATA[<h1 id="hack-a-sattalk-to-me-goose">Hack a Sat — Talk to me, Goose</h1>

<p>The “Talk to me, Goose challenge” on Hackasat</p>

<p>This challenge is just after the “Can you hear me now?” challenge (see <a href="/2020/05/hack-a-sat-can-you-hear-me-now/">Hack a Sat - Can you hear me now?</a> ). Now LaunchDotCom has a new Satellite called Carnac 2.0.</p>

<p>There are two attached files. The first one is the manual of the satellite in which we can see the onboard equipment:</p>

<p><img src="/assets/posts/medium/1_Yn5BggzZddP21yFopKx9PA.png" alt="System Diagram of Carnac 2.0 Satellite" /><em>System Diagram of Carnac 2.0 Satellite</em></p>

<p>There is also a XTCE file in which the Telemetry Data looks the same as previous challenge, but now there is a Command Section which implies that we will need to send commands back to the satellite. If we connect to the telemetry server and run the bonus script form the previous challenge, we will see that is only transmitting EPS</p>

<p><img src="/assets/posts/medium/1_QGRnvC2S4sj_gM_8HHvXGQ.png" alt="EPS Telemetry Data" /><em>EPS Telemetry Data</em></p>

<p>Also you can see that most of the equipments are off. The one that interest us is the FLAG_ENABLE which enables the FLAG Generator equipment to output our flag.</p>

<p>So I went directly to the XTCE to find a Enable Flag command that would toggle that. I found this section:</p>

<p><img src="/assets/posts/medium/1_GgD477ihhBIjwsjG9yQReQ.png" alt="EnableFLAG command" /><em>EnableFLAG command</em></p>

<p>The logic is the same as applied for the previous flag, but now instead is for encoding a command and sending back to the satellite. We can assume we can send data back using the same connection we opened to the telemetry server. So I first created a encoder for the header:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">enableflag</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">"c_version"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_type"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s">"c_sechd"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_gpflags"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="s">"c_apid"</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
  <span class="s">"c_ssc"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_plen"</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">EncodeHeader</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_version"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_type"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_sechd"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_ssc"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="k">return</span> <span class="n">data</span>

</code></pre></div></div>

<p>Then the missing data would be 3 bytes:</p>

<ul>
  <li>CMD =&gt; Which tells the command to execute</li>
  <li>PARAM =&gt; The command parameter</li>
  <li>PowerState =&gt; To enable the power</li>
</ul>

<p>Since we would need to send data back, I decided to use the pwntools library ( see <a href="http://docs.pwntools.com/en/stable/">http://docs.pwntools.com/en/stable/</a> ) and make a realtime decoder for the telemetry.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">struct</span><span class="p">,</span> <span class="n">binascii</span>

<span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>


<span class="n">APID_FLAG_PACKET</span> <span class="o">=</span> <span class="mi">102</span>
<span class="n">APID_EPS_PACKET</span> <span class="o">=</span> <span class="mi">103</span>
<span class="n">APID_PAYLOAD_PACKET</span> <span class="o">=</span> <span class="mi">105</span>

<span class="n">enableflag</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">"c_version"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_type"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s">"c_sechd"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_gpflags"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="s">"c_apid"</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
  <span class="s">"c_ssc"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_plen"</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">EncodeHeader</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_version"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_type"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_sechd"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_ssc"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">c_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xE0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
  <span class="n">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
  <span class="n">c_sechd</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
  <span class="n">c_apid</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">c_gpflags</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
  <span class="n">c_ssc</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">c_plen</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span>

<span class="k">def</span> <span class="nf">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">bitstream</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">"08b"</span><span class="p">):</span>
      <span class="n">bitstream</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

  <span class="n">flagdata</span> <span class="o">=</span> <span class="s">""</span>

  <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">b</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">+=</span> <span class="n">bitstream</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
      <span class="n">flagdata</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">bitstream</span> <span class="o">=</span> <span class="n">bitstream</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>

  <span class="k">return</span> <span class="n">flagdata</span>

<span class="k">def</span> <span class="nf">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">battemp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
  <span class="n">voltage</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">low_pwr_thresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>

  <span class="n">LOW_PWR_MODE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">BATT_HTR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">PAYLOAD_PWR</span>   <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>

  <span class="n">PAYLOAD_ENABLE</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
  <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
  <span class="n">BAD_CMD_COUNT</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;I"</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="s">"low_pwr_thresh"</span><span class="p">:</span> <span class="n">low_pwr_thresh</span><span class="p">,</span>
    <span class="s">"voltage"</span><span class="p">:</span> <span class="n">voltage</span><span class="p">,</span>
    <span class="s">"LOW_PWR_MODE"</span><span class="p">:</span> <span class="n">LOW_PWR_MODE</span><span class="p">,</span>
    <span class="s">"BATT_HTR"</span><span class="p">:</span> <span class="n">BATT_HTR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_PWR"</span><span class="p">:</span> <span class="n">PAYLOAD_PWR</span><span class="p">,</span>
    <span class="s">"FLAG_PWR"</span><span class="p">:</span> <span class="n">FLAG_PWR</span><span class="p">,</span>
    <span class="s">"ADCS_PWR"</span><span class="p">:</span> <span class="n">ADCS_PWR</span><span class="p">,</span>
    <span class="s">"RADIO1_PWR"</span><span class="p">:</span> <span class="n">RADIO1_PWR</span><span class="p">,</span>
    <span class="s">"RADIO2_PWR"</span><span class="p">:</span> <span class="n">RADIO2_PWR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_ENABLE"</span><span class="p">:</span> <span class="n">PAYLOAD_ENABLE</span><span class="p">,</span>
    <span class="s">"FLAG_ENABLE"</span><span class="p">:</span> <span class="n">FLAG_ENABLE</span><span class="p">,</span>
    <span class="s">"ADCS_ENABLE"</span><span class="p">:</span> <span class="n">ADCS_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO1_ENABLE"</span><span class="p">:</span> <span class="n">RADIO1_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO2_ENABLE"</span><span class="p">:</span> <span class="n">RADIO2_ENABLE</span><span class="p">,</span>
    <span class="s">"BAD_CMD_COUNT"</span><span class="p">:</span> <span class="n">BAD_CMD_COUNT</span><span class="p">,</span>
  <span class="p">}</span>


<span class="n">rv</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"goose.satellitesabove.me"</span><span class="p">,</span> <span class="mi">5033</span><span class="p">)</span>
<span class="n">rv</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"Ticket please:"</span><span class="p">)</span>
<span class="n">rv</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">"ticket{delta76170foxtrot:GCOmAUq4Fz8K0PQ1qFpviGNJXkI0FmI2eIDZ9BB2EvbrZwD0EoKIt0af4wyrI0W7QA}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">v</span> <span class="o">=</span> <span class="n">rv</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"Telemetry Service running at "</span><span class="p">)</span>
<span class="n">v</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">rv</span><span class="p">.</span><span class="n">recv</span><span class="p">(),</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf8"</span><span class="p">)</span>

<span class="n">host</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">":"</span><span class="p">)</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Connecting %s:%d"</span> <span class="o">%</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span>

<span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Received %d bytes"</span> <span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>

    <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span> <span class="o">=</span> <span class="n">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>
    <span class="k">if</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="n">APID_FLAG_PACKET</span><span class="p">:</span>
      <span class="n">flag</span> <span class="o">=</span> <span class="n">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"THE FLAG: %s"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="n">APID_EPS_PACKET</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"EPS: "</span><span class="p">)</span>
      <span class="n">eps</span> <span class="o">=</span> <span class="n">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="n">pprint</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"GOT PACKET %d with LENGTH %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">c_apid</span><span class="p">,</span> <span class="n">c_plen</span><span class="p">))</span>
      <span class="k">print</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"ERROR: "</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
    <span class="k">break</span>

<span class="n">rv</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">r</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>If you see the code, I also implemented it to find which telemetry server to connect. So it basically connects to the main server, presents the ticket, gets the address of the telemetery server and then operates the telemetry server. I also let the EPS and FLAG decoder enabled on this one.</p>

<p><img src="/assets/posts/medium/1_J86N_zazHwBqairuHCIlgg.png" alt="Realtime Telemetry Decoding" /><em>Realtime Telemetry Decoding</em></p>

<p>Then I made a function called SendEnables which would send data back to the satellite trying to enable the flag.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">SendEnables</span><span class="p">():</span>
  <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">EncodeHeader</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x02\x01</span><span class="s">"</span><span class="p">)</span> <span class="c1"># Payload
</span>
  <span class="c1"># (...)
</span>  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">SendEnables</span><span class="p">()</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="c1"># (...)
</span></code></pre></div></div>

<p>The first two bytes are the restriction imposed by the EnableFLAG command according to XTCE. The third byte represents the PowerState in which value 1 is for POWER ON state.</p>

<p>Sadly, that didn’t worked. The satellite seemed to be ignoring the command since the BAD_CMD_COUNT field wasn’t increasing. Then I started playing with other enables. I noticed that the voltage value was increasing every time I received a EPS packet. According to the doc this value is a two byte encoded float in some weird way.</p>

<p><img src="/assets/posts/medium/1_FJ_GNpNWFstomDCulVZs_w.png" alt="VoltageType definition" /><em>VoltageType definition</em></p>

<p>I tried for a few hours to understand what that that meant. I couldn’t figure out so I just decoded as a uint16. I couldn’t figure out to calculate so I just assumed its a normal uint16 that would have direct correlation to voltage itself.</p>

<p>So I imagine that it was some sort of voltage related issue since when the voltage value reached the same value as LOW_POWER_THRESH the connection went off. So I decided to encode the command to send the LOW_POWER_THRESH change values.</p>

<p><img src="/assets/posts/medium/1_ny8lIZj3RH0JmfHMkPrrhQ.png" alt="LOW_PWR_THRES command" /><em>LOW_PWR_THRES command</em></p>

<p>Since that would have PLENGTH =3, I did another function to create the header (yes, I was lazy).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">EncodeHeader2</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_version"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_type"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_sechd"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_ssc"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="c1"># (...)
</span><span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">EncodeHeader2</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x0C</span><span class="s">"</span> <span class="o">+</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">))</span> <span class="c1"># LW_PWR_THRES
</span></code></pre></div></div>

<p>And since I had no clue how to encode that, I send some random values (like 65535, 0, 32768). All of them were incrementing the BAD_CMD_COUNT which probably mean that I was not encoding valid values. So I decided a bruteforce approach to find out which values were valid.</p>

<p>Since it was slow, I decided to send 100 commands each time send enable was calculated.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">SendEnables</span><span class="p">():</span>
  <span class="k">global</span> <span class="n">s</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Sending enable %d"</span> <span class="o">%</span> <span class="n">s</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">EncodeHeader2</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x0C</span><span class="s">"</span> <span class="o">+</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="c1"># LW_PWR_THRES
</span>    <span class="n">s</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>I was only expecting it to not increment the BAD_CMD_COUNT sometime, so I could find out the range of valid values. But after it reached 1200</p>

<p><img src="/assets/posts/medium/1_rbUMCcuP6CmzB1Dh1lqmxg.png" alt="FLAG FOUND!" /><em>FLAG FOUND!</em></p>

<p>The flag poped out!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flag{delta76170foxtrot:GJiGsdjw9Kdc5UONnu06i42WeTMVNH1OzOKJTzIq6lJPbLCtb3AsRu2YUVGn-Slb2vnXh2vLC36D-xvKISAKD68}\x00\x19\x03\x00\x03@)L}
</code></pre></div></div>

<p>There was a very big moment of laugh in my team because of that (we were in discord and everyone was seeing my screen in that moment). That must not be a safe way to control a satellite :P</p>

<p>Full Script</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">struct</span><span class="p">,</span> <span class="n">binascii</span>

<span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>


<span class="n">APID_FLAG_PACKET</span> <span class="o">=</span> <span class="mi">102</span>
<span class="n">APID_EPS_PACKET</span> <span class="o">=</span> <span class="mi">103</span>
<span class="n">APID_PAYLOAD_PACKET</span> <span class="o">=</span> <span class="mi">105</span>

<span class="n">enableflag</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">"c_version"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_type"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="s">"c_sechd"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_gpflags"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
  <span class="s">"c_apid"</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
  <span class="s">"c_ssc"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s">"c_plen"</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">EncodeHeader</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_version"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_type"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_sechd"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_ssc"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_plen"</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">EncodeHeader2</span><span class="p">():</span>
  <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_version"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_type"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_sechd"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_apid"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">enableflag</span><span class="p">[</span><span class="s">"c_gpflags"</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">enableflag</span><span class="p">[</span><span class="s">"c_ssc"</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
  <span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span>
  <span class="k">return</span> <span class="n">data</span>


<span class="k">def</span> <span class="nf">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">c_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xE0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
  <span class="n">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
  <span class="n">c_sechd</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
  <span class="n">c_apid</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">c_gpflags</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
  <span class="n">c_ssc</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">c_plen</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span>

<span class="k">def</span> <span class="nf">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">bitstream</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">"08b"</span><span class="p">):</span>
      <span class="n">bitstream</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

  <span class="n">flagdata</span> <span class="o">=</span> <span class="s">""</span>

  <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">b</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">+=</span> <span class="n">bitstream</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
      <span class="n">flagdata</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">bitstream</span> <span class="o">=</span> <span class="n">bitstream</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>

  <span class="k">return</span> <span class="n">flagdata</span>

<span class="k">def</span> <span class="nf">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">battemp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
  <span class="n">voltage</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">low_pwr_thresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>

  <span class="n">LOW_PWR_MODE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">BATT_HTR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">PAYLOAD_PWR</span>   <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>

  <span class="n">PAYLOAD_ENABLE</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
  <span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
  <span class="n">BAD_CMD_COUNT</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;I"</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="s">"low_pwr_thresh"</span><span class="p">:</span> <span class="n">low_pwr_thresh</span><span class="p">,</span>
    <span class="s">"voltage"</span><span class="p">:</span> <span class="n">voltage</span><span class="p">,</span>
    <span class="s">"LOW_PWR_MODE"</span><span class="p">:</span> <span class="n">LOW_PWR_MODE</span><span class="p">,</span>
    <span class="s">"BATT_HTR"</span><span class="p">:</span> <span class="n">BATT_HTR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_PWR"</span><span class="p">:</span> <span class="n">PAYLOAD_PWR</span><span class="p">,</span>
    <span class="s">"FLAG_PWR"</span><span class="p">:</span> <span class="n">FLAG_PWR</span><span class="p">,</span>
    <span class="s">"ADCS_PWR"</span><span class="p">:</span> <span class="n">ADCS_PWR</span><span class="p">,</span>
    <span class="s">"RADIO1_PWR"</span><span class="p">:</span> <span class="n">RADIO1_PWR</span><span class="p">,</span>
    <span class="s">"RADIO2_PWR"</span><span class="p">:</span> <span class="n">RADIO2_PWR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_ENABLE"</span><span class="p">:</span> <span class="n">PAYLOAD_ENABLE</span><span class="p">,</span>
    <span class="s">"FLAG_ENABLE"</span><span class="p">:</span> <span class="n">FLAG_ENABLE</span><span class="p">,</span>
    <span class="s">"ADCS_ENABLE"</span><span class="p">:</span> <span class="n">ADCS_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO1_ENABLE"</span><span class="p">:</span> <span class="n">RADIO1_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO2_ENABLE"</span><span class="p">:</span> <span class="n">RADIO2_ENABLE</span><span class="p">,</span>
    <span class="s">"BAD_CMD_COUNT"</span><span class="p">:</span> <span class="n">BAD_CMD_COUNT</span><span class="p">,</span>
  <span class="p">}</span>


<span class="n">rv</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"goose.satellitesabove.me"</span><span class="p">,</span> <span class="mi">5033</span><span class="p">)</span>
<span class="n">rv</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"Ticket please:"</span><span class="p">)</span>
<span class="n">rv</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">"ticket{delta76170foxtrot:GCOmAUq4Fz8K0PQ1qFpviGNJXkI0FmI2eIDZ9BB2EvbrZwD0EoKIt0af4wyrI0W7QA}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">v</span> <span class="o">=</span> <span class="n">rv</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"Telemetry Service running at "</span><span class="p">)</span>
<span class="n">v</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">rv</span><span class="p">.</span><span class="n">recv</span><span class="p">(),</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf8"</span><span class="p">)</span>

<span class="n">host</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">":"</span><span class="p">)</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Connecting %s:%d"</span> <span class="o">%</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span>

<span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">SendEnables</span><span class="p">():</span>
  <span class="k">global</span> <span class="n">s</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Sending enable %d"</span> <span class="o">%</span> <span class="n">s</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">EncodeHeader2</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x0C</span><span class="s">"</span> <span class="o">+</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="c1"># LW_PWR_THRES
</span>    <span class="n">s</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
  <span class="k">try</span><span class="p">:</span>
    <span class="n">SendEnables</span><span class="p">()</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="c1"># data += chunk
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Received %d bytes"</span> <span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>

    <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span> <span class="o">=</span> <span class="n">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>
    <span class="k">if</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="n">APID_FLAG_PACKET</span><span class="p">:</span>
      <span class="n">flag</span> <span class="o">=</span> <span class="n">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"THE FLAG: %s"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="n">APID_EPS_PACKET</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"EPS: "</span><span class="p">)</span>
      <span class="n">eps</span> <span class="o">=</span> <span class="n">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="n">pprint</span><span class="p">(</span><span class="n">eps</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">eps</span><span class="p">[</span><span class="s">"RADIO2_ENABLE"</span><span class="p">]</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">EncodeHeader</span><span class="p">()</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x02\x01</span><span class="s">"</span><span class="p">)</span> <span class="c1"># Flag
</span>    <span class="k">else</span><span class="p">:</span>
      <span class="k">print</span><span class="p">(</span><span class="s">"GOT PACKET %d with LENGTH %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">c_apid</span><span class="p">,</span> <span class="n">c_plen</span><span class="p">))</span>
      <span class="k">print</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="c1"># data = data[c_plen+1:]
</span>  <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"ERROR: "</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
    <span class="k">break</span>

<span class="n">rv</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">r</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Hacking" /><category term="Linux" /><category term="CTF" /><category term="SDR" /><category term="Camera" /><category term="Hacking" /><category term="CTF" /><category term="Hackasat" /><category term="CTF Writeup" /><category term="Satellite" /><category term="XTCE" /><summary type="html"><![CDATA[Hack a Sat — Talk to me, Goose]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_b23VUAe-7ZvnQF4MIZO73A.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_b23VUAe-7ZvnQF4MIZO73A.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hack a Sat - Phasors to Stun</title><link href="https://lucasteske.dev/2020/05/hack-a-sat-phasors-to-stun/" rel="alternate" type="text/html" title="Hack a Sat - Phasors to Stun" /><published>2020-05-30T16:15:00+00:00</published><updated>2020-05-30T16:15:00+00:00</updated><id>https://lucasteske.dev/2020/05/hack-a-sat-phasors-to-stun</id><content type="html" xml:base="https://lucasteske.dev/2020/05/hack-a-sat-phasors-to-stun/"><![CDATA[<h1 id="hack-a-sat--phasors-to-stun">Hack a sat  —  Phasors to Stun</h1>

<p>The challenge</p>

<p>I got really excited about it because its a SDR one. And everyone that knows me know that I love SDR stuff.</p>

<p>The zip file itself contains a wav file which they told us is not an audio but an radio signal</p>

<p><img src="/assets/posts/medium/1_oEKFYtXfQrg3o9EcymOpLw.png" alt="File command to show what the wave file is" /><em>File command to show what the wave file is</em></p>

<p>If we open in audacity we will se a very interesting pattern:</p>

<p><img src="/assets/posts/medium/1_B6iuajNIgKRnK1eDHE9RfA.png" alt="Audacity view of the wave file" /><em>Audacity view of the wave file</em></p>

<p>That looks like a 2-FSK demodulated file (see <a href="https://en.wikipedia.org/wiki/Frequency-shift_keying">https://en.wikipedia.org/wiki/Frequency-shift_keying</a>). When you demodulate a 2-FSK I/Q from correctly from a Radio, it will convert the frequency to voltage leading to a pattern like the one saw.</p>

<p>I said 2-FSK besides other ones, because there is clearly almost only three values there: 1, 0 and -1. The 0 is usually the transistion, and in a 2-FSK 1 and -1 represents the bits itself. We can use GNU Radio to transform that in a bitstream, but before we need to know the baud rate (or bit rate).</p>

<p>That can be done manually in the audacity itself. Just find two peaks that are closer to each other than other any other. That’s probably the <strong>minimum period</strong> of the signal which usually tells us a bit change. For example:</p>

<p><img src="/assets/posts/medium/1_tZUQt0MBQvI0i2JbHiDauw.png" alt="Two short peaks selected" /><em>Two short peaks selected</em></p>

<p>I got one negative and one positive short peak, which would represent a 0 to 1 transition or a 1 to 0 transition. Then you can see that there is 4 samples selected (just check these dots, they’re the samples in the file) which means that there is 4 samples per bit in the wav signal. Since the wav sample rate is 32000 we can expect the baudrate to be something close to 8000. So now we have enough information then we can go to GNU Radio!</p>

<p>In GNU Radio the first thing we should do is get a Wav File Source to open the file:</p>

<p><img src="/assets/posts/medium/1_FFyDLx-6GeTnYS8-aUNqRA.png" alt="Wave File Source" /><em>Wave File Source</em></p>

<p>I selected the option <strong>Repeat</strong> to be false, so it will not run foverer repeting the file. After that we need something to synchronize our bits and find where to sample the bits we want. There are several blocks that can do that, but I usually prefer the <strong>M&amp;M Clock Recovery</strong> block. Its easy to use and since the singnal does not have much noise on it, it will work perfectly. One thing to notice is that the M&amp;M usually works on complex samples, so you need to change the sample type to <strong>float</strong>. Then there is a few parameters to set:</p>

<p><img src="/assets/posts/medium/1_bo6sVsrnFugs0MHKug-2Aw.png" alt="M&amp;M Clock Recovery Parameters" /><em>M&amp;M Clock Recovery Parameters</em></p>

<p>The most important here is <strong>Omega</strong>. Omega represents the number of input samples per output sample (let’s call symbol). We found out that the input audio has 4 samples per symbol. So our <strong>Omega</strong> is 4. The other parameters defines how the tracking loop works. You can start with the parameters I put (is usually the defaults what I try initially) and tune afterwards. They’re mostly effective for signals that are degraded by noise which is not the case of this flag. That means basically any value should work.</p>

<p>One thing worth to mention is that the <strong>Omega Relative Limit</strong> limits how much from the “last detected symbol” the current symbol can deviate. If you put higher enough, the lock will be loose and can detect wrong symbols. Since our signal basically doesn’t have any noise, we can put this value very low.</p>

<p>Now we can plug the two blocks:</p>

<p><img src="/assets/posts/medium/1_pLL_Dw-EBadWJaJI3l69Mw.png" alt="Clock Recovery + Wav File" /><em>Clock Recovery + Wav File</em></p>

<p>The next step is to use a <strong>Binary Slicer</strong> blocks that will convert a -1 in float to a 0 byte and a 1 float to 1 byte. But before that we need to talk about bit alignment and how it affects us.</p>

<p>Let’s supose we have this string:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HELLO
</code></pre></div></div>

<p>That in binary is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>01001000 01000101 01001100 01001100 01001111
   H         E        L        L       O
</code></pre></div></div>

<p>If we have a stream that repeats hello two times we will have something like that:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>01001000 01000101 01001100 01001100 01001111 01001000 01000101 ...
   H         E        L        L       O        H        E
</code></pre></div></div>

<p>When receiving continuous signals, you usually don’t know where you started fetching the data. Its possible that we started at middle of a byte instead of the start. That affects us because if we start counting a byte from the middle, we will have bytes that have pieces of to bytes. For example if we started at bit 4:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1000010001010100110001001100010011110100100001000101
</code></pre></div></div>

<p>We will be missing 4 bits from the first byte and we would not know that. And if we tried to decode it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10000100 01010100 11000100 11000100 11110100 10000100 0101 ...
   �         T        �       �        �         �
</code></pre></div></div>

<p>The signal wouldn’t make sense to us. So we need to account that we might have a bit shift in that. Since our chars are 1 byte wide (8 bits) we only need to check from shift 0 to 7, since if it is bigger than that, it will be the same as N byte shift + n bit shift.</p>

<p>On gnuradio we can use a <strong>Skip Head</strong> block that will skip N samples before sending the data to the next block.</p>

<p><img src="/assets/posts/medium/1_VBVu-iZh_AbeQKbiBN_XbQ.png" alt="Wav + MM + Skip" /><em>Wav + MM + Skip</em></p>

<p>We can start with Num Items = 0 because we don’t know if the data has been shifted. Then we can get to the next block that is the binary slicer.</p>

<p><img src="/assets/posts/medium/1_FmWEN_NT_DC9HvDyMxJnUw.png" alt="Wav + MM + Skip + Slicer" /><em>Wav + MM + Skip + Slicer</em></p>

<p>The binary slicer work is simple: It receive float samples. If the sample is &gt; 0 it outputs a byte with value 1. If its ≤ 0 it outputs a byte 0.</p>

<p>After that we will have a stream of bits unpacked in a stream of bytes. We need to pack them together (each 8 bytes of input to form a single byte). For that we can use the <strong>Pack K Bits</strong> block.</p>

<p><img src="/assets/posts/medium/1_aC8JZtn8fhN7Mb8E1xA-eA.png" alt="Wav + MM + Skip + Slicer + Pack" /><em>Wav + MM + Skip + Slicer + Pack</em></p>

<p>The <strong>Pack K Bits</strong> block will fetch <strong>K</strong> input bytes, put them together and output a single byte. It is basically a Add + Shift process that after it processes <strong>K</strong> inputs, it outputs the memory and resets. It will basically transform:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00000001 00000000 00000001 00000001 00000001 00000000 00000001 00000001
</code></pre></div></div>

<p>And make a single byte:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10111011
</code></pre></div></div>

<p>After that we can save it to a file using the <strong>File Sink</strong> block.</p>

<p><img src="/assets/posts/medium/1_2i7xMJCqsO2akqRGV8-m9Q.png" alt="Complete decode flow" /><em>Complete decode flow</em></p>

<p>I selected it to <strong>Overwrite</strong> the output file, so when we change the Skip Head, it just replaces the old file.</p>

<p>Now we have our complete decode flow, we can hit run in the bar.</p>

<p>After that we can inspect our file by running <strong>cat</strong> on it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat output.bin
</code></pre></div></div>

<p><img src="/assets/posts/medium/1_D32TnW8NmfxpfM7CqEl9SA.png" alt="cat output" /><em>cat output</em></p>

<p>We can see that something is periodic, but it doesnt make sense. So we repeat the process increasing Num Items. And then with Num Items = 5</p>

<p><img src="/assets/posts/medium/1_NV7eIw_aTHQct1asN90onw.png" alt="FLAG FOUND" /><em>FLAG FOUND</em></p>

<p>We’ve found the flag!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>THE FLAG IS: flag{xray72468alpha:GKhWwvFNBGHT44M8d5Z2y4sc9xo7T4tNrwlTw5OWuCg_9dd4Ow_aiMDgxTtL9ng2s2sEDMA0AfTrsSpjv_sNvMg}
</code></pre></div></div>

<p>Final flow:</p>

<p><img src="/assets/posts/medium/1_lEYyYL0REStDYZi7xkGmag.png" alt="Final GNU Radio Flow" /><em>Final GNU Radio Flow</em></p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Hacking" /><category term="Linux" /><category term="CTF" /><category term="SDR" /><category term="Camera" /><category term="Hacking" /><category term="CTF" /><category term="Hackasat" /><category term="CTF Writeup" /><category term="Satellite" /><category term="SDR" /><category term="GNU Radio" /><category term="Radio" /><summary type="html"><![CDATA[Hack a sat  —  Phasors to Stun]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_R1n7vaNfInOP6BCFXkjv1Q.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_R1n7vaNfInOP6BCFXkjv1Q.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hack a Sat - Can you hear me now?</title><link href="https://lucasteske.dev/2020/05/hack-a-sat-can-you-hear-me-now/" rel="alternate" type="text/html" title="Hack a Sat - Can you hear me now?" /><published>2020-05-30T01:47:00+00:00</published><updated>2020-05-30T01:47:00+00:00</updated><id>https://lucasteske.dev/2020/05/hack-a-sat-can-you-hear-me-now</id><content type="html" xml:base="https://lucasteske.dev/2020/05/hack-a-sat-can-you-hear-me-now/"><![CDATA[<h1 id="hack-a-satcan-you-hear-me-now">Hack-a-sat — Can you hear me now?</h1>

<p>That challenged asked us to decode a Telemetry data that was being sent over a TCP port. If you open the netcat, the following happen:</p>

<p><img src="/assets/posts/medium/1_WTSv1hH_Rbrc98-SLlmUOw.png" alt="" /></p>

<p>Then if you connect to the Telemetry Service using netcat:</p>

<p><img src="/assets/posts/medium/1_7DSxuzMFhO7bWNiUofvCZQ.png" alt="" /></p>

<p>In the provided zip file there is a telemetry.xtce file which is a XML file that tells us how the binary packet is encoded. A quick search over the internet lead me to the Wikipedia: <a href="https://en.wikipedia.org/wiki/XML_Telemetric_and_Command_Exchange">https://en.wikipedia.org/wiki/XML_Telemetric_and_Command_Exchange</a></p>

<p>It is defined in the CCSDS Green Book (the spec <a href="https://public.ccsds.org/Pubs/660x0g1.pdf">https://public.ccsds.org/Pubs/660x0g1.pdf</a> )</p>

<p>The file has several sections. I will describe a few of them:</p>

<ul>
  <li><strong>ParameterTypeSet</strong> — Describes the type of parameters to be used in the protocol definition</li>
  <li><strong>ParameterSet</strong> — Describes parameters to be used in protocol definition</li>
  <li><strong>ContainerSet</strong> — Describes the structures inside the protocol</li>
</ul>

<p>We will get back to them afterwards. I’m bit lazy to check the whole spec since it should be straightforward to read directly the XTCE. I usually find that when it comes to Aerospace Stuff (Sorry NASA and friends) <strong>it’s easier to reverse engineer</strong> than read the docs. So I just did a quick look in the documentation and quit (its huge).</p>

<p>By a quick look inside the xtce file we can find how the flag is defined:</p>

<p><img src="/assets/posts/medium/1_HwFLwpkgNcTIOqAyOCOHVg.png" alt="Flag definition on XTCE" /></p>

<p>Each of the parameters looks like a single character from the flag, <strong>but they’re 7 bit encoded</strong>. That means if we look at the raw binary, we will not see the flag itself since each ASCII character is 8 bits wide.</p>

<p>In the <strong>ContainerSet</strong> we can see the possible structs that we received. Let’s take a look in a piece:</p>

<p><img src="/assets/posts/medium/1_Iw2Q-LIH_Lh60mY9YeloJw.png" alt="AbstractTM Packet Header Definition" /><em>AbstractTM Packet Header Definition</em></p>

<p>That piece specifies a <strong>Container</strong> called “AbstractTM Packet Header” (I think I will launch a company called <strong>Abstract</strong> after that) in which there are few entries. These entries are mapped to the binary itself. Notice the parameterRef which points to a previous defined parameter at <strong>ParameterSet</strong> section. Let’s take a look:</p>

<p><img src="/assets/posts/medium/1_GJ1T6nETTg4SZe-g-DFoLQ.png" alt="CCSDS Header Parameter Types" /><em>CCSDS Header Parameter Types</em></p>

<p>From there we can infer:</p>

<ul>
  <li>The field CCSDS_VERSION is encoded in 3 bit</li>
  <li>The field CCSDS_TYPE is encoded in 1 bit</li>
  <li>The field CCSDS_SEC_HD is encoded in 1 bit</li>
  <li>The field CCSDS_APID is encoded in 11 bit</li>
  <li>The field CCSDS_GP_FLAGS is encoded in 2 bit</li>
  <li>The field CCSDS_SSC is encoded in 14 bit</li>
  <li>The field CCSDS_PLENGTH is encoded in 2 bytes (16 bit)</li>
</ul>

<p>If you sum up all, you will get a header that is 6 bytes long. When seeing this two fields came to my attention. The APID and PLENGTH . <strong>APID</strong> is usually refered to <strong>AP</strong>plication <strong>ID</strong>entification and <strong>PLENGTH</strong> to <strong>P</strong>acket <strong>LENGTH</strong>.</p>

<p>That means that even if there are a lot of packets, we dont need to <em>really</em> parse them, just the flag one. We can skip by knowing the APID and Packet Length. So let’s search the Flag packet!</p>

<p><img src="/assets/posts/medium/1_99xgvX4FJB4oieHVz2ug8g.png" alt="Start of Flag Packet definition" /><em>Start of Flag Packet definition</em></p>

<p><img src="/assets/posts/medium/1_ozGAORywhHA7M1C5tb9mVQ.png" alt="End of Flag Packet definition" /><em>End of Flag Packet definition</em></p>

<p>So here I split the image because the packet definition is huge (lots of FLAGXX fields). We can see a new section here: <strong>RestrictionCriteria</strong>.</p>

<p>That section tells us which is the condition that the parser should met to parse the content as that packet. That says that if a packet has the following Field =&gt; Values in the Packet Header:</p>

<ul>
  <li><strong>CCSDS_VERSION</strong> =&gt; 0</li>
  <li><strong>CCSDS_TYPE</strong>    =&gt; 0</li>
  <li><strong>CCSDS_SEC_HD</strong>  =&gt; 0</li>
  <li><strong>CCSDS_APID</strong>    =&gt; 102</li>
</ul>

<p>That means we got our Flag Packet. So let’s assume all packets have a header and make our parser!</p>

<p>I started dumping the netcat to a file so I can process without having to connect every time. That’s simple by just piping:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc 18.219.199.203 20072 <span class="o">&gt;</span> dump.bin
</code></pre></div></div>

<p>Then started writing a simple python script. First by</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">struct</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"dump.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
<span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">c_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xE0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
  <span class="n">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
  <span class="n">c_sechd</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
  <span class="n">c_apid</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">c_gpflags</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
  <span class="n">c_ssc</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">c_plen</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="p">)</span>
  <span class="k">return</span> <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span>

<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
  <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span> <span class="o">=</span> <span class="n">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"GOT PACKET %d with LENGTH %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">c_apid</span><span class="p">,</span> <span class="n">c_plen</span><span class="p">))</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>         <span class="c1"># Skip the header
</span>                          <span class="c1"># data[:c_plen+1] has content
</span>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">c_plen</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1"># remove the current data
</span></code></pre></div></div>

<p>This decodes the header by doing some bit shifting. And if my assumption that every packet has a header and the packet length I could iterate over the file until no bytes are left. Since the file is small, I could load the entire file in the memory. Then running the script gave me:</p>

<p><img src="/assets/posts/medium/1_mOSeuplpeXYIbF0eq7Kl-Q.png" alt="" /></p>

<p>Got no errors and the data looks fine! We also got the APID 102 which is what the APID for Flag Packet. Then the content should be easy to read.</p>

<p>If we check the Flag Packet definition, besides the header, there is only the FLAGXXX fields there which means the entire content is the flag. Then we can just get the whole content and decode from 7 bit to 8 bit. Do do that, I was really lazy to do the proper bit shifting, so I just created an array with 1’s and 0’s strings, when it reached 8, I packed into a char and added to an array. That would be really slow for big data, but for a 120 byte flag should be good. So thats the code I tried:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">struct</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"dump.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
<span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">c_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xE0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
  <span class="n">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
  <span class="n">c_sechd</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
  <span class="n">c_apid</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">c_gpflags</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
  <span class="n">c_ssc</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">c_plen</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="p">)</span>
  <span class="k">return</span> <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span>

<span class="k">def</span> <span class="nf">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">bitstream</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">"08b"</span><span class="p">):</span>
      <span class="n">bitstream</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

  <span class="n">flagdata</span> <span class="o">=</span> <span class="s">""</span>

  <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">b</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">+=</span> <span class="n">bitstream</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
      <span class="n">flagdata</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">bitstream</span> <span class="o">=</span> <span class="n">bitstream</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>

  <span class="k">return</span> <span class="n">flagdata</span>

<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
  <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span> <span class="o">=</span> <span class="n">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"GOT PACKET %d with LENGTH %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">c_apid</span><span class="p">,</span> <span class="n">c_plen</span><span class="p">))</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>         <span class="c1"># Skip the header
</span>                          <span class="c1"># data[:c_plen+1] has content
</span>  <span class="k">if</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="mi">102</span><span class="p">:</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">[:</span><span class="n">c_plen</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"THE FLAG: %s"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">c_plen</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1"># remove the current data
</span></code></pre></div></div>

<p>Then when running:</p>

<p><img src="/assets/posts/medium/1_OXCEAcC4nNZ-0okS2GW0Zg.png" alt="" /></p>

<p>BINGO, THERE IS OUR FLAG!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flag{echo22103romeo:GBd3nn6tIl060NgQ1e_mLZx-1ccydJ1LMAtqgZlWURHX-GPLmnLTZ3CfNvIvTi7JkB4hxxM5uuOuCT5SMmfFz2k}
</code></pre></div></div>

<p>I hope you liked the explanation. I didn’t take a deep dive in XTCE stuff but just the enough to get the flag. The XTCE format looks interesting (pretty much like a protobuf but in XML) and I will take a look eventually. That also has been my first CTF in my life and was really fun to play!</p>

<h2 id="bonus">BONUS</h2>

<p>We can also decode the EPS data which should give us some satellite info (and a spoiler to the next flag):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">struct</span>

<span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"dump.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
<span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">c_version</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xE0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span>
  <span class="n">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
  <span class="n">c_sechd</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
  <span class="n">c_apid</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">c_gpflags</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xC0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span>
  <span class="n">c_ssc</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">c_plen</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="p">)</span>
  <span class="k">return</span> <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span>

<span class="k">def</span> <span class="nf">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">bitstream</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">"08b"</span><span class="p">):</span>
      <span class="n">bitstream</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

  <span class="n">flagdata</span> <span class="o">=</span> <span class="s">""</span>

  <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">b</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bitstream</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">+=</span> <span class="n">bitstream</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="s">""</span><span class="p">:</span>
      <span class="n">flagdata</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">bitstream</span> <span class="o">=</span> <span class="n">bitstream</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>

  <span class="k">return</span> <span class="n">flagdata</span>

<span class="k">def</span> <span class="nf">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
  <span class="n">battemp</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
  <span class="n">voltage</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">low_pwr_thresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;H"</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])[</span><span class="mi">0</span><span class="p">])</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>

  <span class="n">LOW_PWR_MODE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">BATT_HTR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">PAYLOAD_PWR</span>   <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_PWR</span>      <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_PWR</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>

  <span class="n">PAYLOAD_ENABLE</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">FLAG_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">ADCS_ENABLE</span>    <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO1_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="n">RADIO2_ENABLE</span>  <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
  <span class="n">BAD_CMD_COUNT</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">"&gt;I"</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="s">"low_pwr_thresh"</span><span class="p">:</span> <span class="n">low_pwr_thresh</span><span class="p">,</span>
    <span class="s">"voltage"</span><span class="p">:</span> <span class="n">voltage</span><span class="p">,</span>
    <span class="s">"LOW_PWR_MODE"</span><span class="p">:</span> <span class="n">LOW_PWR_MODE</span><span class="p">,</span>
    <span class="s">"BATT_HTR"</span><span class="p">:</span> <span class="n">BATT_HTR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_PWR"</span><span class="p">:</span> <span class="n">PAYLOAD_PWR</span><span class="p">,</span>
    <span class="s">"FLAG_PWR"</span><span class="p">:</span> <span class="n">FLAG_PWR</span><span class="p">,</span>
    <span class="s">"ADCS_PWR"</span><span class="p">:</span> <span class="n">ADCS_PWR</span><span class="p">,</span>
    <span class="s">"RADIO1_PWR"</span><span class="p">:</span> <span class="n">RADIO1_PWR</span><span class="p">,</span>
    <span class="s">"RADIO2_PWR"</span><span class="p">:</span> <span class="n">RADIO2_PWR</span><span class="p">,</span>
    <span class="s">"PAYLOAD_ENABLE"</span><span class="p">:</span> <span class="n">PAYLOAD_ENABLE</span><span class="p">,</span>
    <span class="s">"FLAG_ENABLE"</span><span class="p">:</span> <span class="n">FLAG_ENABLE</span><span class="p">,</span>
    <span class="s">"ADCS_ENABLE"</span><span class="p">:</span> <span class="n">ADCS_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO1_ENABLE"</span><span class="p">:</span> <span class="n">RADIO1_ENABLE</span><span class="p">,</span>
    <span class="s">"RADIO2_ENABLE"</span><span class="p">:</span> <span class="n">RADIO2_ENABLE</span><span class="p">,</span>
    <span class="s">"BAD_CMD_COUNT"</span><span class="p">:</span> <span class="n">BAD_CMD_COUNT</span><span class="p">,</span>
  <span class="p">}</span>

<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
  <span class="n">c_version</span><span class="p">,</span> <span class="n">c_type</span><span class="p">,</span> <span class="n">c_sechd</span><span class="p">,</span> <span class="n">c_apid</span><span class="p">,</span> <span class="n">c_gpflags</span><span class="p">,</span> <span class="n">c_ssc</span><span class="p">,</span> <span class="n">c_plen</span> <span class="o">=</span> <span class="n">DecodeHeader</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"GOT PACKET %d with LENGTH %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">c_apid</span><span class="p">,</span> <span class="n">c_plen</span><span class="p">))</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">:]</span>         <span class="c1"># Skip the header
</span>                          <span class="c1"># data[:c_plen+1] has content
</span>  <span class="k">if</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="mi">102</span><span class="p">:</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">DecodeFlag</span><span class="p">(</span><span class="n">data</span><span class="p">[:</span><span class="n">c_plen</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"THE FLAG: %s"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
  <span class="k">elif</span> <span class="n">c_apid</span> <span class="o">==</span> <span class="mi">103</span><span class="p">:</span>
   <span class="n">pprint</span><span class="p">(</span><span class="n">DecodeEPS</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">c_plen</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1"># remove the current data
</span></code></pre></div></div>

<p><img src="/assets/posts/medium/1_zs_TGnP0aqNndWHg_h8rKw.png" alt="" /></p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="Hacking" /><category term="Linux" /><category term="CTF" /><category term="Camera" /><category term="Hacking" /><category term="CTF" /><category term="Hackasat" /><category term="CTF Writeup" /><category term="Satellite" /><category term="XTCE" /><summary type="html"><![CDATA[Hack-a-sat — Can you hear me now?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_87tDTK5_FodI9TghHRpznQ.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_87tDTK5_FodI9TghHRpznQ.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Integrating Hacked Touch Panel into Home Assistant</title><link href="https://lucasteske.dev/2019/12/integrating-hacked-touch-panel-into-home-assistant/" rel="alternate" type="text/html" title="Integrating Hacked Touch Panel into Home Assistant" /><published>2019-12-30T02:15:00+00:00</published><updated>2019-12-30T02:15:00+00:00</updated><id>https://lucasteske.dev/2019/12/integrating-hacked-touch-panel-into-home-assistant</id><content type="html" xml:base="https://lucasteske.dev/2019/12/integrating-hacked-touch-panel-into-home-assistant/"><![CDATA[<h1 id="integrating-hacked-touch-panel-into-home-assistant">Integrating Hacked Touch Panel into Home Assistant</h1>

<p>In the previous <a href="https://medium.com/@lucasteske/hacking-dimmer-touch-panel-with-esp8266-1d916485caff">article</a> I showed a simple hack of a chinese Touch Panel. Now I have successfully integrated it Home Assistant and I’m able to turn my room light on / off. Here is how.</p>

<p>From now on I will assume you have ESPHome working on your machine and Home Assistant configured. ESPHome is very easy to install if you have python pip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>esphome
</code></pre></div></div>
<p>Should install everything you need.</p>

<p>First let’s create our project. I will call it touchpanel.yml:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">esphome</span><span class="pi">:</span>
  <span class="c1"># Change it for any name you want. This is what Home Assistant will show</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">lucasslider</span>
  <span class="na">platform</span><span class="pi">:</span> <span class="s">ESP8266</span>
  <span class="na">board</span><span class="pi">:</span> <span class="s">nodemcuv2</span>
  <span class="na">includes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">touchpanel.h</span>
    <span class="pi">-</span> <span class="s">wtc801.h</span>
    <span class="pi">-</span> <span class="s">wtc801.cpp</span>

<span class="na">wifi</span><span class="pi">:</span>
  <span class="c1"># Change to your wifi configuration</span>
  <span class="na">ssid</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyWifiSSID"</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MyWifiPassword"</span>

  <span class="c1"># Enable fallback hotspot (captive portal) in case wifi connection fails</span>
  <span class="na">ap</span><span class="pi">:</span>
    <span class="na">ssid</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Lucas</span><span class="nv"> </span><span class="s">Slider</span><span class="nv"> </span><span class="s">Fallback</span><span class="nv"> </span><span class="s">Hotspot"</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1234567890"</span>

<span class="na">captive_portal</span><span class="pi">:</span>

<span class="c1"># Enable logging</span>
<span class="na">logger</span><span class="pi">:</span>

<span class="c1"># Enable Home Assistant API</span>
<span class="na">api</span><span class="pi">:</span>
  <span class="c1"># Home Assistant will ask this password when configuring the device</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MySecretAPIPass"</span>

<span class="na">ota</span><span class="pi">:</span>
  <span class="c1"># ESPHome will ask this password for reprogramming the ESP8266 Over-The-Air</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">MySecretAPIPass"</span>

<span class="c1"># Empty just to include Binary Sensor Library</span>
<span class="na">binary_sensor</span><span class="pi">:</span>

<span class="c1"># Empty just to include Sensor Library</span>
<span class="na">sensor</span><span class="pi">:</span>

<span class="c1"># Our Custom Component</span>
<span class="na">custom_component</span><span class="pi">:</span>
  <span class="na">lambda</span><span class="pi">:</span> <span class="pi">|-</span>
    <span class="s">auto touchpanel = new TouchPanel();</span>
    <span class="s">App.register_component(touchpanel);</span>
    <span class="s">App.register_binary_sensor(touchpanel-&gt;leftButton);</span>
    <span class="s">// Change for the name you want</span>
    <span class="s">touchpanel-&gt;leftButton-&gt;set_name("TouchPanel Quarto Lucas Botao Esquerdo");</span>
    <span class="s">App.register_binary_sensor(touchpanel-&gt;powerButton);</span>
    <span class="s">// Change for the name you want</span>
    <span class="s">touchpanel-&gt;powerButton-&gt;set_name("TouchPanel Quarto Lucas Botao Energia");</span>
    <span class="s">App.register_binary_sensor(touchpanel-&gt;rightButton);</span>
    <span class="s">// Change for the name you want</span>
    <span class="s">touchpanel-&gt;rightButton-&gt;set_name("TouchPanel Quarto Lucas Botao Direito");</span>
    <span class="s">App.register_sensor(touchpanel-&gt;slider);</span>
    <span class="s">// Change for the name you want</span>
    <span class="s">touchpanel-&gt;slider-&gt;set_name("Touch Panel Quarto Lucas Slider");</span>
    <span class="s">touchpanel-&gt;slider-&gt;set_force_update(false);</span>
    <span class="s">return {touchpanel};</span>
</code></pre></div></div>

<p>Check the comments in this file to change the required fields.</p>

<p>Now this will require us to add some C++ code (including the library I previous created). So let’s first download the wtc801 library files wtc801.h and wtc801.cpp and put in the same folder as the touchpanel.yml</p>

<ul>
  <li><a href="https://raw.githubusercontent.com/racerxdl/wtc801/master/src/wtc801.h">wtc801.h</a></li>
  <li><a href="https://raw.githubusercontent.com/racerxdl/wtc801/master/src/wtc801.cpp">wtc801.cpp</a></li>
</ul>

<p>And then create a touchpanel.h file that will hold our custom ESPHome component:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include</span> <span class="cpf">&lt;esphome.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
#include</span> <span class="cpf">"wtc801.h"</span><span class="cp">
</span>
<span class="k">class</span> <span class="nc">TouchPanel</span> <span class="o">:</span> <span class="k">public</span> <span class="n">PollingComponent</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="n">BinarySensor</span> <span class="o">*</span><span class="n">leftButton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BinarySensor</span><span class="p">();</span>
  <span class="n">BinarySensor</span> <span class="o">*</span><span class="n">powerButton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BinarySensor</span><span class="p">();</span>
  <span class="n">BinarySensor</span> <span class="o">*</span><span class="n">rightButton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BinarySensor</span><span class="p">();</span>

  <span class="n">Sensor</span> <span class="o">*</span><span class="n">slider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sensor</span><span class="p">();</span>

  <span class="n">WTC801</span> <span class="o">*</span><span class="n">panel</span><span class="p">;</span>

  <span class="c1">// constructor</span>
  <span class="n">TouchPanel</span><span class="p">()</span> <span class="o">:</span> <span class="n">PollingComponent</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">panel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WTC801</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
  <span class="p">}</span>


  <span class="kt">void</span> <span class="n">onKeyEvent</span><span class="p">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Slider</span><span class="p">:</span>
        <span class="n">slider</span><span class="o">-&gt;</span><span class="n">publish_state</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">KeyLeft</span><span class="p">:</span>
        <span class="n">leftButton</span><span class="o">-&gt;</span><span class="n">publish_state</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">KeyPower</span><span class="p">:</span>
        <span class="n">powerButton</span><span class="o">-&gt;</span><span class="n">publish_state</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">KeyRight</span><span class="p">:</span>
        <span class="n">rightButton</span><span class="o">-&gt;</span><span class="n">publish_state</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">cb</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">TouchPanel</span><span class="o">::</span><span class="n">onKeyEvent</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_2</span><span class="p">);</span>
    <span class="n">panel</span><span class="o">-&gt;</span><span class="n">setOnEvent</span><span class="p">(</span><span class="n">cb</span><span class="p">);</span>
    <span class="n">panel</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
    <span class="n">panel</span><span class="o">-&gt;</span><span class="n">loop</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>This will define 3 binary sensors for the buttons and one “Common” Sensor for the Slider. Their names are declared in touchpanel.yml lambda section.</p>

<p>After that we can build and upload our project using ESPHome:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>esphome touchpanel.yaml run
</code></pre></div></div>
<p>If everything went correct, you should receive a notification in Home Assistant:</p>

<p><img src="/assets/posts/medium/1_NT6tGsyFM1hNJcOPpTxQXg.png" alt="Notification Badge" /><em>Notification Badge</em></p>

<p><img src="/assets/posts/medium/1_MtVJFWBx1ZpAfsXpdA1PJw.png" alt="Home assistance showing that it discovered some devices" /><em>Home assistance showing that it discovered some devices</em></p>

<p>If we click in Check it out button, it will guide us to the Device Discovery &amp; Configure page.</p>

<p><img src="/assets/posts/medium/1_HLZwF2leapkkjApmwWX2OQ.png" alt="Our device ready to be configured" /><em>Our device ready to be configured</em></p>

<p>Hit the Configure button and Home Assistant will start configuring your device. It will ask the API Password that you defined in touchpanel.yml .</p>

<p>After it configures, it will show in the device list:</p>

<p><img src="/assets/posts/medium/1_8Cbc7Lqi4Pv2MbP328hHNw.png" alt="Our new device configured showing in the device list" /><em>Our new device configured showing in the device list</em></p>

<p>Now we can configure the Automation to toggle the light using Home Automation</p>

<p>Click in the device line shown in the list. This will lead you another device list:</p>

<p><img src="/assets/posts/medium/1_aIIM8hfXoODHOSd3n-ZDmQ.png" alt="List of devices" /><em>List of devices</em></p>

<p>Click in the device name at the list and it will lead you to the device info page.</p>

<p><img src="/assets/posts/medium/1_QGPmRlttzkt18wK48B38vg.png" alt="Device Info" /><em>Device Info</em></p>

<p>In the end of the page, there is an automation section</p>

<p><img src="/assets/posts/medium/1_ARNZhXZEG50Vr_WarHAoRQ.png" alt="Automation Section" /><em>Automation Section</em></p>

<p>Click in any of turned on options and it will lead to the Automation Config Page.</p>

<p>Give a name to your automation, for example Toggle my light</p>

<p><img src="/assets/posts/medium/1_9X3ppxYucux5A_qXAWfJXg.png" alt="Name and Description of the Automation" /><em>Name and Description of the Automation</em></p>

<p>In the Triggers section, make sure the correct trigger is selected</p>

<p><img src="/assets/posts/medium/1_aX9Kkwu_zrflZ2cjyXbZpA.png" alt="Triggers Section showing this automation will be triggered when TouchPanel button is turned on" /><em>Triggers Section showing this automation will be triggered when TouchPanel button is turned on</em></p>

<p>In Actions section select Call Service as Action Type , light.toggle as Service and add the following to Service Data</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>entity_id: light.name_of_your_light
</code></pre></div></div>

<p><img src="/assets/posts/medium/1_JGw9KVojMqpraPTYBPkHRA.png" alt="Configured action for toggling light in Home Assistant" /><em>Configured action for toggling light in Home Assistant</em></p>

<p>Then hit the save button and test it.</p>

<p><img src="/assets/posts/medium/1_j0PZsbnuvYDjknV3gJ2bMw.png" alt="Save Button on the bottom-right side" /><em>Save Button on the bottom-right side</em></p>

<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Now the chinese touchpanel turns my room light on/off! - Agora o touchpanel chines desliga/liga luz do meu quarto! <a href="https://t.co/78HeoG946z">pic.twitter.com/78HeoG946z</a></p>&mdash; Cybernetic Lover (@lucasteske) <a href="https://twitter.com/lucasteske/status/1211462800062722048?ref_src=twsrc%5Etfw">December 30, 2019</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>

<p>Your house automation is done!</p>

<p>Home Assistant: <a href="https://www.home-assistant.io/">https://www.home-assistant.io/</a></p>

<p>ESPHome: <a href="https://esphome.io/">https://esphome.io/</a></p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="LimeSDR" /><category term="Hacking" /><category term="Home Assistant" /><category term="Linux" /><category term="ESPHome" /><category term="Camera" /><category term="Hacking" /><category term="Home Assistant" /><category term="Arduino" /><category term="ESP8266" /><category term="ESP32" /><category term="ESPHome" /><summary type="html"><![CDATA[Integrating Hacked Touch Panel into Home Assistant]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_hBwbHXERpWD5N8ZGqqlXMw.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_hBwbHXERpWD5N8ZGqqlXMw.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hacking Dimmer Touch Panel with ESP8266</title><link href="https://lucasteske.dev/2019/12/hacking-dimmer-touch-panel-with-esp8266/" rel="alternate" type="text/html" title="Hacking Dimmer Touch Panel with ESP8266" /><published>2019-12-29T20:42:00+00:00</published><updated>2019-12-29T20:42:00+00:00</updated><id>https://lucasteske.dev/2019/12/hacking-dimmer-touch-panel-with-esp8266</id><content type="html" xml:base="https://lucasteske.dev/2019/12/hacking-dimmer-touch-panel-with-esp8266/"><![CDATA[<h1 id="hacking-dimmer-touch-panel-with-esp8266">Hacking Dimmer Touch Panel with ESP8266</h1>

<p>I bought two of these <a href="https://www.banggood.com/8A-Touch-Panel-Controller-Dimmer-Wall-Switch-12-24V-For-LED-Strip-Light-Lamp-p-1057315.html?rmmds=myorder&amp;ID=233&amp;cur_warehouse=CN&amp;zf=5568173">LED Touch Panel Dimmers</a> in <a href="https://www.banggood.com/8A-Touch-Panel-Controller-Dimmer-Wall-Switch-12-24V-For-LED-Strip-Light-Lamp-p-1057315.html?rmmds=myorder&amp;ID=233&amp;cur_warehouse=CN&amp;zf=5568173">Banggood</a> and they look pretty good. But since my house automation has its own way to controlling the lights I wonder if I could hack them to send info to Home Assistant.</p>

<p>The first thing I opened one of them to check what’s inside. It has two boards connected by a Flat Cable</p>

<p><img src="/assets/posts/medium/0_BfQNjC-bMZTMbOb2.jpeg" alt="Touch Panel Board" /><em>Touch Panel Board</em></p>

<p><img src="/assets/posts/medium/1_YBQrRwabzV7tWWh8xdWqxA.png" alt="Dimmer Board" /><em>Dimmer Board</em></p>

<p>The dimmer board does have some micro controller that looks like a PIC, few mosfets and a buzzer. The touch panel has a WTC801SPI controller.</p>

<p><img src="/assets/posts/medium/1_LOEEUiky7RU3Kr7xkSYvAw.png" alt="WTC801SPI Controller" /><em>WTC801SPI Controller</em></p>

<p>Luckily the datasheet is available for this controller, and I were able to find the 10-pin flat cable connector pinout by using a multimeter and the datasheet info.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     1 -
     2 -
     3 - OUT_FLAG
     4 - GND
     5 -
     6 - CS
     7 - SCK
     8 - SI (Slave Input)
     9 - SO (Slave Output)
    10 - VCC
</code></pre></div></div>
<p>Some of the unmapped pins has some board connections which I will sometime map it (I think this board actually has a LED onboard). Still we got what we need: the SPI Data.</p>

<p>To test it, I got a small NodeMCU board (ESP8266) and hooked up like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     1 -
     2 -
     3 -
     4 - GND =&gt; ESP8266 GND
     5 -
     6 - CS  =&gt; ESP8266 GPIO15 (D8)
     7 - SCK =&gt; ESP8266 GPIO14 (D5)
     8 - SI  =&gt; ESP8266 GPIO13 (D7)
     9 - SO  =&gt; ESP8266 GPIO12 (D6)
    10 - VCC =&gt; ESP8266 3.3V
</code></pre></div></div>
<p>For now I ignored the <em>OUT_FLAG</em> pin, because I can just read it from the SPI bus. If I wanted to make a ultra low power setup, I could use this pin to wake up the ESP8266 from a deep sleep to process. The OUT_FLAG is high whenever any touch is made.</p>

<p><img src="/assets/posts/medium/1_T0OihHoVLzgkJNuqmTlzNA.png" alt="ESP8266 hooked to Touch Panel Board" /><em>ESP8266 hooked to Touch Panel Board</em></p>

<p>Reading a bit more of the datasheet, this IC is pretty simple: You always read/write one byte and they always mean the same thing. No addresses, no commands, nothing. When you’re reading one byte it will report the state of one button or the slider:</p>

<p><img src="/assets/posts/medium/1_SRpVyCM4_6abh1GUW6JGwg.png" alt="Bit map of read byte" /><em>Bit map of read byte</em></p>

<p>So the 7th bit defines if the data you just read is a Slider value or Button Value. So I made a very simple sketch to get these values out:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;SPI.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SCK  D5
#define MISO D6
#define CS   D8
#define MOSI D7
</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"OK"</span><span class="p">);</span>

  <span class="n">pinMode</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MOSI</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MISO</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>

  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="n">SPI</span><span class="p">.</span><span class="n">pins</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">MISO</span><span class="p">,</span> <span class="n">MOSI</span><span class="p">,</span> <span class="n">CS</span><span class="p">);</span>
  <span class="n">SPI</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="kt">uint8_t</span> <span class="n">data</span> <span class="o">=</span> <span class="n">SPI</span><span class="p">.</span><span class="n">transfer</span><span class="p">(</span><span class="mh">0xFF</span><span class="p">);</span> <span class="c1">// Always transfer full 1 bits</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">BIN</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What it does is: Keep the SI HIGH (by writing 0xFF) as the datasheet asks for, and read one byte from SO. Print as binary to the serial port and waits 100ms before trying again.</p>

<p>By running this and pressing some buttons, I can check that if nothing is pressed, it returns *11111111_.</p>

<p>Since the first bit tells us if its a button press or slider roll let’s make a different line printed for each:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;SPI.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SCK  D5
#define MISO D6
#define CS   D8
#define MOSI D7
</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"OK"</span><span class="p">);</span>

  <span class="n">pinMode</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MOSI</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MISO</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>

  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="n">SPI</span><span class="p">.</span><span class="n">pins</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">MISO</span><span class="p">,</span> <span class="n">MOSI</span><span class="p">,</span> <span class="n">CS</span><span class="p">);</span>
  <span class="n">SPI</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="kt">uint8_t</span> <span class="n">data</span> <span class="o">=</span> <span class="n">SPI</span><span class="p">.</span><span class="n">transfer</span><span class="p">(</span><span class="mh">0xFF</span><span class="p">);</span> <span class="c1">// Always transfer full 1 bits</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="kt">uint8_t</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">data</span> <span class="o">&amp;</span> <span class="mh">0x80</span><span class="p">;</span> <span class="c1">// Get the 7th bit</span>
  <span class="n">data</span> <span class="o">&amp;=</span> <span class="mh">0x7F</span><span class="p">;</span> <span class="c1">// Reset it, so we have only the pure value in data</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Buttons</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"BUTTONS: "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">BIN</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// Slider</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"SLIDER: "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">DEC</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Since the roller should give us a number, it will now print as decimal. The buttons will still be printed as binary.</p>

<p>Then by testing the slider, I noticed the range is from 1 to 54 (54 being the bottom and 1 being top. Which by the drawings should be 100% to 54 and 0% to 1). As for the buttons:</p>

<ul>
  <li>0b =&gt; When Right button is pressed</li>
  <li>1b =&gt; When Power button is pressed</li>
  <li>10b =&gt; When Left button is pressed</li>
</ul>

<p>Pressing more than one button at same time doesn’t make any effect. The IC just keeps the first pressed button down. By the binary numbers we can expect the data variable to be:</p>

<ul>
  <li>0 =&gt; When Right button is pressed</li>
  <li>1 =&gt; When Power button is pressed</li>
  <li>2 =&gt; When Left button is pressed</li>
  <li>127 =&gt; When none are pressed (all 1’s)</li>
</ul>

<p>With that information we can do a better parsing of everything:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;SPI.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SCK  D5
#define MISO D6
#define CS   D8
#define MOSI D7
</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"OK"</span><span class="p">);</span>

  <span class="n">pinMode</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MOSI</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">MISO</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>

  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="n">SPI</span><span class="p">.</span><span class="n">pins</span><span class="p">(</span><span class="n">SCK</span><span class="p">,</span> <span class="n">MISO</span><span class="p">,</span> <span class="n">MOSI</span><span class="p">,</span> <span class="n">CS</span><span class="p">);</span>
  <span class="n">SPI</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="kt">uint8_t</span> <span class="n">data</span> <span class="o">=</span> <span class="n">SPI</span><span class="p">.</span><span class="n">transfer</span><span class="p">(</span><span class="mh">0xFF</span><span class="p">);</span> <span class="c1">// Always transfer full 1 bits</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">CS</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>

  <span class="kt">uint8_t</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">data</span> <span class="o">&amp;</span> <span class="mh">0x80</span><span class="p">;</span> <span class="c1">// Get the 7th bit</span>
  <span class="n">data</span> <span class="o">&amp;=</span> <span class="mh">0x7F</span><span class="p">;</span> <span class="c1">// Reset it, so we have only the pure value in data</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="mh">0x7F</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// We have some data, not all 1's</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Buttons</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"BUTTONS: "</span><span class="p">);</span>
      <span class="k">switch</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
          <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"RIGHT"</span><span class="p">);</span>
          <span class="k">break</span>
        <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
          <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"POWER"</span><span class="p">);</span>
          <span class="k">break</span>
        <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
          <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"LEFT"</span><span class="p">);</span>
          <span class="k">break</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// Slider</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"SLIDER: "</span><span class="p">);</span>
      <span class="c1">// MAX is 54 and MIN is 1 so:</span>
      <span class="kt">uint16_t</span> <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
      <span class="n">v</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">// MIN</span>
      <span class="n">v</span> <span class="o">*=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// Percent</span>
      <span class="n">v</span> <span class="o">/=</span> <span class="p">(</span><span class="mi">54</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">// MAX - MIN</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"%"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we have the slider information in percent and button presses by name. There are some more nice work you can do, but I did a small library that does everything for you in a event way:
<a href="https://github.com/racerxdl/wtc801">https://github.com/racerxdl/wtc801</a></p>

<p>This hack was pretty simple, but I want to write about it. Sometime later I will write about the Home Assistant integration. Hope you like it!</p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="LimeSDR" /><category term="Hacking" /><category term="Home Assistant" /><category term="Linux" /><category term="ESPHome" /><category term="Camera" /><category term="Hacking" /><category term="Home Assistant" /><category term="Arduino" /><category term="ESP8266" /><category term="ESP32" /><category term="ESPHome" /><summary type="html"><![CDATA[Hacking Dimmer Touch Panel with ESP8266]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/0_NB2IwKOMRoAK5Yr5.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/0_NB2IwKOMRoAK5Yr5.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Creating your own GSM Network with LimeSDR</title><link href="https://lucasteske.dev/2019/12/creating-your-own-gsm-network-with-limesdr/" rel="alternate" type="text/html" title="Creating your own GSM Network with LimeSDR" /><published>2019-12-21T17:48:00+00:00</published><updated>2019-12-21T17:48:00+00:00</updated><id>https://lucasteske.dev/2019/12/creating-your-own-gsm-network-with-limesdr-1935bac257f4</id><content type="html" xml:base="https://lucasteske.dev/2019/12/creating-your-own-gsm-network-with-limesdr/"><![CDATA[<h1 id="creating-your-own-gsm-network-with-limesdr">Creating your own GSM Network with LimeSDR</h1>

<blockquote>
  <h2 id="disclaimer-this-procedure-is-highly-ilegal-basically-anywhere-in-the-world-be-sure-to-run-this-in-a-closed-rf-environment-aka-faraday-cage"><strong>DISCLAIMER: This procedure is highly ilegal basically anywhere in the world. Be sure to run this in a closed RF environment (aka Faraday Cage)</strong></h2>
  <h2 id="this-article-works-with-any-limesdr-version">This article works with any LimeSDR version.</h2>
</blockquote>

<p>For this example we will use the Osmocom GSM Stack in the NITB (Network in the box) mode. In this mode the phones connected to you BTS will be able to call each other and send SMS messages. There is also the Interconnect mode in which the BSC (Base Station Controller) connects to a ISDN or IPBX (for example Asterisk) to manage the connected phones. You can check the different modes here: <a href="https://osmocom.org/projects/openbsc/wiki/OpenBSC#Configurations-Modes">https://osmocom.org/projects/openbsc/wiki/OpenBSC#Configurations-Modes</a></p>

<p>For this article I will be using a Ubuntu 18.04 LTS as operating system since there are pre-compiled packages from <a href="https://limemicro.com/">LimeMicro</a> that helps a lot. It should run in any linux distribution provided that it has the required packages and / or you compile the missing ones. I might make a tutorial later about how to install from the source code but for now I will stick to the pre-compiled packages.</p>

<h2 id="installing-the-required-packages">Installing the required packages</h2>

<p>The first thing we need to do is to install all required packages. LimeMicro did a nice work and gathered everything pre compiled in their PPAs. So let’s add them first:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository <span class="nt">-y</span> ppa:myriadrf/drivers
<span class="nb">sudo </span>add-apt-repository <span class="nt">-y</span> ppa:myriadrf/gnuradio
</code></pre></div></div>

<p>Let’s also add the osmocom binary builds:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://download.opensuse.org/repositories/network:/osmocom:/latest/xUbuntu_18.04/Release.key
<span class="nb">sudo </span>apt-key add Release.key
<span class="nb">rm </span>Release.key
<span class="nb">echo</span> <span class="s2">"deb [https://download.opensuse.org/repositories/network:/osmocom:/latest/xUbuntu_18.04/](https://download.opensuse.org/repositories/network:/osmocom:/latest/xUbuntu_18.04/) ./"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/osmocom-latest.list
<span class="nb">sudo </span>apt-get update
</code></pre></div></div>

<p>Then we can install required packages:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>osmocom-nitb osmo-trx-lms osmo-bts-trx limesuite
</code></pre></div></div>

<p>These packages are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">osmocom-nitb</code> =&gt; Network in a Box Package. Contains all needed stuff for managing GSM Network</li>
  <li><code class="language-plaintext highlighter-rouge">osmo-bts-trx</code> =&gt; The Base Transceiver Station software that manages how the network packets will be sent.</li>
  <li><code class="language-plaintext highlighter-rouge">osmo-trx-lms</code> =&gt; The LimeSDR “frontend” for the BTS. This is the piece of software that actually communicates with LimeSDR</li>
  <li><code class="language-plaintext highlighter-rouge">limesuite</code> =&gt; The software and driver for the LimeSDR</li>
</ul>

<h2 id="updating-the-limesdr-firmware">Updating the LimeSDR Firmware</h2>

<p>It is a good pratice to check if your LimeSDR firmware is up to date. To check and update if needed, you only need to run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LimeUtil <span class="nt">--update</span>
</code></pre></div></div>

<p>It should do everything that is needed to update</p>

<h2 id="creating-the-configuration-files">Creating the configuration files</h2>

<p>There are few files that need to be created. Let’s first start with the OpenBSC config file <em>openbsc.cfg</em>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!
! OpenBSC configuration saved from vty
!   !
password foo
!
line vty
 no login
!
e1_input
 e1_line 0 driver ipa
network
 network country code 901
 mobile network code 70
 short name HUEHUE
 long name HUEBRNetwork
 auth policy accept-all
 location updating reject cause 13
 encryption a5 0
 neci 1
 rrlp mode none
 mm info 1
 handover 0
 handover window rxlev averaging 10
 handover window rxqual averaging 1
 handover window rxlev neighbor averaging 10
 handover power budget interval 6
 handover power budget hysteresis 3
 handover maximum distance 9999
 bts 0
  type sysmobts
  band GSM900
  cell_identity 0
  location_area_code 1
  training_sequence_code 7
  base_station_id_code 63
  ms max power 15
  cell reselection hysteresis 4
  rxlev access min 0
  channel allocator ascending
  rach tx integer 9
  rach max transmission 7
  ip.access unit_id 1801 0
  oml ip.access stream_id 255 line 0
  gprs mode none
  trx 0
   rf_locked 0
   arfcn 100
   nominal power 23
   max_power_red 20
   rsl e1 tei 0
   timeslot 0
    phys_chan_config CCCH+SDCCH4
   timeslot 1
    phys_chan_config SDCCH8
   timeslot 2
    phys_chan_config TCH/F
   timeslot 3
    phys_chan_config TCH/F
   timeslot 4
    phys_chan_config TCH/F
   timeslot 5
    phys_chan_config TCH/F
   timeslot 6
    phys_chan_config TCH/F
   timeslot 7
    phys_chan_config TCH/F
</code></pre></div></div>
<p>There are several parameters here, but I will only describe the ones you might want to change:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>network country code 901
mobile network code 70
short name HUEHUE
long name HUEBRNetwork
auth policy accept-all
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">network country code</code> =&gt; That is the MCC of the network operator. It says in which country the operator is operating. For example: 724 is Brazil</li>
  <li><code class="language-plaintext highlighter-rouge">mobile network code</code> =&gt; That is the MNC of the network operator. It says which network operator it is. Every mobile network operator has its own MNC (some of them have more than one).</li>
  <li><code class="language-plaintext highlighter-rouge">short name</code> =&gt; The Short name of the network operator</li>
  <li><code class="language-plaintext highlighter-rouge">long name</code> =&gt; The Long Name of the network operator</li>
  <li><code class="language-plaintext highlighter-rouge">auth policy</code> =&gt; How we will accept the phones that are trying to connect.</li>
</ul>

<p>Be careful setting these settings specially with a <strong>accept-all</strong> policy. If you set to an existing mobile operator, any phone that is close to your LimeSDR will connect to it. The names of the operator (at least in a Android Device) only appears after connecting to it.</p>

<p>That <strong>openbsc.cfg</strong> file will be used by <strong>osmo-nitb</strong> software. The next file is <strong>osmo-bts.cfg</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!
! OsmoBTS configuration example
!!
!
log stderr
  logging color 1
  logging timestamp 0
  logging level rsl notice
  logging level oml notice
  logging level rll notice
  logging level rr notice
  logging level loop debug
  logging level meas debug
  logging level pag error
  logging level l1c error
  logging level l1p error
  logging level dsp error
  logging level abis error

!
line vty
 no login
!
phy 0
 instance 0
  osmotrx rx-gain 40
  osmotrx tx-attenuation 50
 osmotrx ip local 127.0.0.1
 osmotrx ip remote 127.0.0.1
 no osmotrx timing-advance-loop
bts 0
 oml remote-ip 127.0.0.1
 ipa unit-id 1801 0
 gsmtap-sapi pdtch
 gsmtap-sapi ccch
 band 900
 trx 0
  phy 0 instance 0
</code></pre></div></div>

<p>The only importante parameter here to take care is <strong>band</strong>. Make sure is the same as in <em>openbsc.cfg</em> file. The next one is <em>osmo-trx.cfg</em> which will be used by <em>osmo-trx-lms:</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>log stderr
 logging filter all 1
 logging color 1
 logging print category 1
 logging timestamp 1
 logging print file basename
 logging level set-all info
!
line vty
 no login
!
trx
 bind-ip 127.0.0.1
 remote-ip 127.0.0.1
 base-port 5700
 egprs disable
 tx-sps 4
 rx-sps 4
 rt-prio 18
 chan 0
  tx-path BAND1
  rx-path LNAW
</code></pre></div></div>

<p>There are not much to change here. If you’re using a multi-port LimeSDR (like LimeSDR USB or PCIe) you can change the parameter <em>tx-path</em> and *rx-path *to the desired paths.</p>

<h2 id="running-the-software-stack">Running the software stack</h2>

<p>There are a few programs to run to get the BTS working. You should run all of them from the folder you created the configuration files.</p>

<p>The first one we should run is osmo-trx-lms . This one should be ran as root to enable high priority scheduling (specially needed if you’re running a small SBC like a Raspberry PI).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>osmo-trx-lms
</code></pre></div></div>

<p><img src="/assets/posts/medium/1_KbNtmYsmaCMVJinWnJdhFg.png" alt="OSMO TRX LMS running" /></p>

<p>The second one is the osmo-nitb which is the base station controller. This one doesn’t need to be ran as root.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>osmo-nitb
</code></pre></div></div>

<p><img src="/assets/posts/medium/1_MmIJlBChAK1XF8TzxoX80g.png" alt="Osmo NITB running" /></p>

<p>And the last software is the osmo-bts-trx which handles the transceiver:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>osmo-bts-trx
</code></pre></div></div>

<p><img src="/assets/posts/medium/1_2il3cVVy8yFsX5hNsESyDw.png" alt="Osmo BTS TRX running" /></p>

<p>Now your base station should be running.</p>

<h2 id="testing-the-base-station">Testing the Base Station</h2>

<p>The best way to test is to have a custom simcard like this one:</p>

<p><img src="/assets/posts/medium/0_pKv_npHA_3DhtIQi.jpg" alt="Sysmocom Custom Simcard [http://shop.sysmocom.de/products/sysmousim-sjs1-4ff](http://shop.sysmocom.de/products/sysmousim-sjs1-4ff)" /><em>Sysmocom Custom Simcard <a href="http://shop.sysmocom.de/products/sysmousim-sjs1-4ff">http://shop.sysmocom.de/products/sysmousim-sjs1-4ff</a></em></p>

<p>But since we set the BTS to <em>accept-all</em> mode, you can just go to your phone network settings and select the created network. That will work fine if you have an Android phone which allows you to select custom networks:</p>

<p><img src="/assets/posts/medium/1_8_tklU4IBXyxERiyDkxl-w.png" alt="List of networks in an Android Phone. Here the 72470 network I just created" /><em>List of networks in an Android Phone. Here the 72470 network I just created</em></p>

<p>Here is the network I just created with MCC 724 and MNC 70. In some simcards it is required that the MCC is the same as sim country (for example here it only shows if the network is at 724).</p>

<p>After connecting to the network, the name should appear instead of the MCC+MNC code:</p>

<p><img src="/assets/posts/medium/1_CrDQk7YysiFXzgaOrxaTQA.png" alt="HUEBRNetwork showing in the list" /><em>HUEBRNetwork showing in the list</em></p>

<h2 id="listing-subscribers">Listing Subscribers</h2>

<p>There is a simple python script to list the subscribers. What it does is to open the sqlite database and do a simple query and print.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span><span class="kn">import</span> <span class="nn">sqlite3</span>

<span class="n">HLR_DATABASE</span> <span class="o">=</span> <span class="s">"hlr.sqlite3"</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">HLR_DATABASE</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
<span class="n">c</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"SELECT * FROM Subscriber"</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"ID</span><span class="se">\t\t</span><span class="s">created</span><span class="se">\t\t</span><span class="s">IMSI</span><span class="se">\t\t\t</span><span class="s">TMSI</span><span class="se">\t\t</span><span class="s">extension</span><span class="se">\n</span><span class="s">"</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">subscriber</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">fetchone</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">subscriber</span><span class="p">:</span>
        <span class="k">break</span>

    <span class="k">print</span> <span class="s">"{0:1}</span><span class="se">\t</span><span class="s">{1:2}</span><span class="se">\t</span><span class="s">{2:&lt;15}</span><span class="se">\t\t</span><span class="s">{3:&lt;10}</span><span class="se">\t</span><span class="s">{4}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
            <span class="n">subscriber</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
            <span class="n">subscriber</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
            <span class="n">subscriber</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
            <span class="n">subscriber</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
            <span class="n">subscriber</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
            <span class="p">)</span>

<span class="n">db</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>The IMSI field is unique to that phone / simcard combination. That’s the number you can use to track a specific user around the world. The extension is the assigned phone number for that specific phone.</p>

<h2 id="sending-sms">Sending SMS</h2>

<p>There are two scripts I found in the internet to send SMS. They basically selects the IMSI from the sqlite database the Osmo stack creates and then connects through the telnet interface to issue the desired commands. One of them is <em>sms_broadcast.py</em>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span><span class="kn">import</span> <span class="nn">telnetlib</span>
<span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">imsi</span> <span class="o">=</span> <span class="mi">999999999999999</span>
<span class="n">HLR_DATABASE</span> <span class="o">=</span> <span class="s">"hlr.sqlite3"</span>

<span class="k">def</span> <span class="nf">check_extension</span><span class="p">(</span><span class="n">extension</span><span class="p">):</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"show subscriber extension %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">extension</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="k">if</span> <span class="sa">b</span><span class="s">"No subscriber found for extension"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="n">create_subscriber</span><span class="p">(</span><span class="n">extension</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">create_subscriber</span><span class="p">(</span><span class="n">extension</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"No user with excension %s found. Creating new..."</span> <span class="o">%</span> <span class="n">extension</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Extension: %s, IMSI: %d"</span> <span class="o">%</span> <span class="p">(</span><span class="n">extension</span><span class="p">,</span> <span class="n">imsi</span><span class="p">))</span>

    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"show subscriber imsi %d</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">imsi</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="k">if</span> <span class="sa">b</span><span class="s">"No subscriber found for imsi"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber create imsi %d</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">imsi</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"enable</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC# "</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber imsi %d extension %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">imsi</span><span class="p">,</span> <span class="n">extension</span><span class="p">))</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC# "</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"disable</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_users</span><span class="p">():</span>
    <span class="c1"># returns user id list generator
</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">HLR_DATABASE</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
    <span class="n">c</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="s">"SELECT * FROM Subscriber"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">subscriber</span> <span class="ow">in</span> <span class="n">c</span><span class="p">.</span><span class="n">fetchall</span><span class="p">():</span>
        <span class="k">yield</span> <span class="n">subscriber</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">send_sms</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">extension</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber id %d sms sender extension %s send %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">extension</span><span class="p">,</span> <span class="n">message</span><span class="p">))</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>
    <span class="k">if</span> <span class="sa">b</span><span class="s">"%"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">extension</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">message</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"usage: ./sms_broadcast.py extension message"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"This script sends a message from the specified extension (number) to all devices connected to this base station"</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="p">.</span><span class="n">Telnet</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="mi">4242</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="n">check_extension</span><span class="p">(</span><span class="n">extension</span><span class="p">)</span>

    <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="n">get_users</span><span class="p">():</span>
        <span class="n">send_sms</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">extension</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</code></pre></div></div>

<p>This one is pretty simple to use:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python sms_broadcast.py <span class="s2">"source number"</span> <span class="s2">"message"</span>
</code></pre></div></div>
<p>This will send an SMS to <strong>all</strong> connected devices as it was the <em>source number</em>.</p>

<p>Another option is to target a single user:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#!/usr/bin/env python
</span><span class="kn">import</span> <span class="nn">telnetlib</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">imsi</span> <span class="o">=</span> <span class="mi">999999999999999</span>

<span class="k">def</span> <span class="nf">check_extension</span><span class="p">(</span><span class="n">extension</span><span class="p">):</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"show subscriber extension %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">extension</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="k">if</span> <span class="sa">b</span><span class="s">"No subscriber found for extension"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Phone with extension %s not found ;("</span> <span class="o">%</span> <span class="n">extension</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">check_spam_subscriber</span><span class="p">():</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"show subscriber imsi %d</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">imsi</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="k">if</span> <span class="sa">b</span><span class="s">"No subscriber found for imsi"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber create imsi %d</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">imsi</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">extension</span><span class="p">,</span> <span class="n">spam_number</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Sending sms from %d..."</span> <span class="o">%</span> <span class="n">spam_number</span><span class="p">)</span>

    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"enable</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC# "</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber imsi %d extension %d</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">imsi</span><span class="p">,</span> <span class="n">spam_number</span><span class="p">))</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC# "</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"disable</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="n">conn</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">"subscriber extension %s sms sender extension %d send %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">extension</span><span class="p">,</span> <span class="n">spam_number</span><span class="p">,</span> <span class="n">message</span><span class="p">))</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="k">if</span> <span class="sa">b</span><span class="s">"%"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">extension</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">repeats</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">message</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">:])</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"usage: ./sms_spam.py extension [num of repeats] message"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"This script sends a message to specified number"</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="n">telnetlib</span><span class="p">.</span><span class="n">Telnet</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="mi">4242</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">read_until</span><span class="p">(</span><span class="sa">b</span><span class="s">"OpenBSC&gt; "</span><span class="p">)</span>

    <span class="n">check_extension</span><span class="p">(</span><span class="n">extension</span><span class="p">)</span>
    <span class="n">check_spam_subscriber</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">repeats</span><span class="p">):</span>
        <span class="n">spam_number</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">9999</span><span class="p">)</span>
        <span class="n">send</span><span class="p">(</span><span class="n">extension</span><span class="p">,</span> <span class="n">spam_number</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>This one generates a random source number and sends the specified message <strong>n</strong> times.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python sms_spam.py <span class="s2">"target number"</span> <span class="s2">"number of times"</span> <span class="s2">"message"</span>
</code></pre></div></div>

<p>There are several stuff you can do by just issuing direct commands to OpenBSC telnet interface. Their full document is available at <a href="https://ftp.osmocom.org/docs/latest/osmobsc-vty-reference.pdf">https://ftp.osmocom.org/docs/latest/osmobsc-vty-reference.pdf</a></p>

<h2 id="bottom-line">Bottom Line</h2>

<p>I hope you all liked this article. It took me a while to write that (I had been really busy since H2HC) but I think it has enough information for anyone to start playing with it. Just remember to do it <strong>wisely and with care</strong>. That’s not only <strong>highly illegal anywhere</strong> but can also do harmful things to existing mobile networks. Using a custom MCC+MNC codes should avoid interfering in existing mobile networks, but remember the frequencies involved requires a license to use.</p>]]></content><author><name>Lucas Teske</name></author><category term="English" /><category term="LimeSDR" /><category term="Hacking" /><category term="SDR" /><category term="Linux" /><category term="Camera" /><category term="Hacking" /><category term="SDR" /><category term="Ubuntu" /><category term="GSM" /><category term="BTS" /><category term="Osmocom" /><category term="Sysmocom" /><summary type="html"><![CDATA[Creating your own GSM Network with LimeSDR]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lucasteske.dev/assets/posts/medium/1_KbNtmYsmaCMVJinWnJdhFg.png" /><media:content medium="image" url="https://lucasteske.dev/assets/posts/medium/1_KbNtmYsmaCMVJinWnJdhFg.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>